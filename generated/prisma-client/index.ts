// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  indication: (where?: IndicationWhereInput) => Promise<boolean>;
  indicator: (where?: IndicatorWhereInput) => Promise<boolean>;
  keyword: (where?: KeywordWhereInput) => Promise<boolean>;
  scenario: (where?: ScenarioWhereInput) => Promise<boolean>;
  strength: (where?: StrengthWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  indication: (where: IndicationWhereUniqueInput) => IndicationNullablePromise;
  indications: (args?: {
    where?: IndicationWhereInput;
    orderBy?: IndicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Indication>;
  indicationsConnection: (args?: {
    where?: IndicationWhereInput;
    orderBy?: IndicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IndicationConnectionPromise;
  indicator: (where: IndicatorWhereUniqueInput) => IndicatorNullablePromise;
  indicators: (args?: {
    where?: IndicatorWhereInput;
    orderBy?: IndicatorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Indicator>;
  indicatorsConnection: (args?: {
    where?: IndicatorWhereInput;
    orderBy?: IndicatorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IndicatorConnectionPromise;
  keyword: (where: KeywordWhereUniqueInput) => KeywordNullablePromise;
  keywords: (args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Keyword>;
  keywordsConnection: (args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => KeywordConnectionPromise;
  scenario: (where: ScenarioWhereUniqueInput) => ScenarioNullablePromise;
  scenarios: (args?: {
    where?: ScenarioWhereInput;
    orderBy?: ScenarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Scenario>;
  scenariosConnection: (args?: {
    where?: ScenarioWhereInput;
    orderBy?: ScenarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ScenarioConnectionPromise;
  strength: (where: StrengthWhereUniqueInput) => StrengthNullablePromise;
  strengths: (args?: {
    where?: StrengthWhereInput;
    orderBy?: StrengthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Strength>;
  strengthsConnection: (args?: {
    where?: StrengthWhereInput;
    orderBy?: StrengthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StrengthConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createIndication: (data: IndicationCreateInput) => IndicationPromise;
  updateIndication: (args: {
    data: IndicationUpdateInput;
    where: IndicationWhereUniqueInput;
  }) => IndicationPromise;
  upsertIndication: (args: {
    where: IndicationWhereUniqueInput;
    create: IndicationCreateInput;
    update: IndicationUpdateInput;
  }) => IndicationPromise;
  deleteIndication: (where: IndicationWhereUniqueInput) => IndicationPromise;
  deleteManyIndications: (where?: IndicationWhereInput) => BatchPayloadPromise;
  createIndicator: (data: IndicatorCreateInput) => IndicatorPromise;
  updateIndicator: (args: {
    data: IndicatorUpdateInput;
    where: IndicatorWhereUniqueInput;
  }) => IndicatorPromise;
  updateManyIndicators: (args: {
    data: IndicatorUpdateManyMutationInput;
    where?: IndicatorWhereInput;
  }) => BatchPayloadPromise;
  upsertIndicator: (args: {
    where: IndicatorWhereUniqueInput;
    create: IndicatorCreateInput;
    update: IndicatorUpdateInput;
  }) => IndicatorPromise;
  deleteIndicator: (where: IndicatorWhereUniqueInput) => IndicatorPromise;
  deleteManyIndicators: (where?: IndicatorWhereInput) => BatchPayloadPromise;
  createKeyword: (data: KeywordCreateInput) => KeywordPromise;
  updateKeyword: (args: {
    data: KeywordUpdateInput;
    where: KeywordWhereUniqueInput;
  }) => KeywordPromise;
  updateManyKeywords: (args: {
    data: KeywordUpdateManyMutationInput;
    where?: KeywordWhereInput;
  }) => BatchPayloadPromise;
  upsertKeyword: (args: {
    where: KeywordWhereUniqueInput;
    create: KeywordCreateInput;
    update: KeywordUpdateInput;
  }) => KeywordPromise;
  deleteKeyword: (where: KeywordWhereUniqueInput) => KeywordPromise;
  deleteManyKeywords: (where?: KeywordWhereInput) => BatchPayloadPromise;
  createScenario: (data: ScenarioCreateInput) => ScenarioPromise;
  updateScenario: (args: {
    data: ScenarioUpdateInput;
    where: ScenarioWhereUniqueInput;
  }) => ScenarioPromise;
  updateManyScenarios: (args: {
    data: ScenarioUpdateManyMutationInput;
    where?: ScenarioWhereInput;
  }) => BatchPayloadPromise;
  upsertScenario: (args: {
    where: ScenarioWhereUniqueInput;
    create: ScenarioCreateInput;
    update: ScenarioUpdateInput;
  }) => ScenarioPromise;
  deleteScenario: (where: ScenarioWhereUniqueInput) => ScenarioPromise;
  deleteManyScenarios: (where?: ScenarioWhereInput) => BatchPayloadPromise;
  createStrength: (data: StrengthCreateInput) => StrengthPromise;
  updateStrength: (args: {
    data: StrengthUpdateInput;
    where: StrengthWhereUniqueInput;
  }) => StrengthPromise;
  updateManyStrengths: (args: {
    data: StrengthUpdateManyMutationInput;
    where?: StrengthWhereInput;
  }) => BatchPayloadPromise;
  upsertStrength: (args: {
    where: StrengthWhereUniqueInput;
    create: StrengthCreateInput;
    update: StrengthUpdateInput;
  }) => StrengthPromise;
  deleteStrength: (where: StrengthWhereUniqueInput) => StrengthPromise;
  deleteManyStrengths: (where?: StrengthWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  indication: (
    where?: IndicationSubscriptionWhereInput
  ) => IndicationSubscriptionPayloadSubscription;
  indicator: (
    where?: IndicatorSubscriptionWhereInput
  ) => IndicatorSubscriptionPayloadSubscription;
  keyword: (
    where?: KeywordSubscriptionWhereInput
  ) => KeywordSubscriptionPayloadSubscription;
  scenario: (
    where?: ScenarioSubscriptionWhereInput
  ) => ScenarioSubscriptionPayloadSubscription;
  strength: (
    where?: StrengthSubscriptionWhereInput
  ) => StrengthSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EventOrderByInput =
  | "date_ASC"
  | "date_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "href_ASC"
  | "href_DESC"
  | "source_ASC"
  | "source_DESC"
  | "id_ASC"
  | "id_DESC"
  | "read_ASC"
  | "read_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IndicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type KeywordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ScenarioOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IndicatorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StrengthOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "strength_ASC"
  | "strength_DESC"
  | "meaning_ASC"
  | "meaning_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface EventWhereInput {
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  href?: Maybe<String>;
  href_not?: Maybe<String>;
  href_in?: Maybe<String[] | String>;
  href_not_in?: Maybe<String[] | String>;
  href_lt?: Maybe<String>;
  href_lte?: Maybe<String>;
  href_gt?: Maybe<String>;
  href_gte?: Maybe<String>;
  href_contains?: Maybe<String>;
  href_not_contains?: Maybe<String>;
  href_starts_with?: Maybe<String>;
  href_not_starts_with?: Maybe<String>;
  href_ends_with?: Maybe<String>;
  href_not_ends_with?: Maybe<String>;
  source?: Maybe<String>;
  source_not?: Maybe<String>;
  source_in?: Maybe<String[] | String>;
  source_not_in?: Maybe<String[] | String>;
  source_lt?: Maybe<String>;
  source_lte?: Maybe<String>;
  source_gt?: Maybe<String>;
  source_gte?: Maybe<String>;
  source_contains?: Maybe<String>;
  source_not_contains?: Maybe<String>;
  source_starts_with?: Maybe<String>;
  source_not_starts_with?: Maybe<String>;
  source_ends_with?: Maybe<String>;
  source_not_ends_with?: Maybe<String>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  read?: Maybe<Boolean>;
  read_not?: Maybe<Boolean>;
  indications_every?: Maybe<IndicationWhereInput>;
  indications_some?: Maybe<IndicationWhereInput>;
  indications_none?: Maybe<IndicationWhereInput>;
  categories_every?: Maybe<CategoryWhereInput>;
  categories_some?: Maybe<CategoryWhereInput>;
  categories_none?: Maybe<CategoryWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface IndicationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  indicator?: Maybe<IndicatorWhereInput>;
  event?: Maybe<EventWhereInput>;
  strength?: Maybe<StrengthWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IndicationWhereInput[] | IndicationWhereInput>;
  OR?: Maybe<IndicationWhereInput[] | IndicationWhereInput>;
  NOT?: Maybe<IndicationWhereInput[] | IndicationWhereInput>;
}

export interface IndicatorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  keywords_every?: Maybe<KeywordWhereInput>;
  keywords_some?: Maybe<KeywordWhereInput>;
  keywords_none?: Maybe<KeywordWhereInput>;
  scenarios_every?: Maybe<ScenarioWhereInput>;
  scenarios_some?: Maybe<ScenarioWhereInput>;
  scenarios_none?: Maybe<ScenarioWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IndicatorWhereInput[] | IndicatorWhereInput>;
  OR?: Maybe<IndicatorWhereInput[] | IndicatorWhereInput>;
  NOT?: Maybe<IndicatorWhereInput[] | IndicatorWhereInput>;
}

export interface KeywordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<KeywordWhereInput[] | KeywordWhereInput>;
  OR?: Maybe<KeywordWhereInput[] | KeywordWhereInput>;
  NOT?: Maybe<KeywordWhereInput[] | KeywordWhereInput>;
}

export interface ScenarioWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  indicators_every?: Maybe<IndicatorWhereInput>;
  indicators_some?: Maybe<IndicatorWhereInput>;
  indicators_none?: Maybe<IndicatorWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ScenarioWhereInput[] | ScenarioWhereInput>;
  OR?: Maybe<ScenarioWhereInput[] | ScenarioWhereInput>;
  NOT?: Maybe<ScenarioWhereInput[] | ScenarioWhereInput>;
}

export interface StrengthWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  strength?: Maybe<Int>;
  strength_not?: Maybe<Int>;
  strength_in?: Maybe<Int[] | Int>;
  strength_not_in?: Maybe<Int[] | Int>;
  strength_lt?: Maybe<Int>;
  strength_lte?: Maybe<Int>;
  strength_gt?: Maybe<Int>;
  strength_gte?: Maybe<Int>;
  meaning?: Maybe<String>;
  meaning_not?: Maybe<String>;
  meaning_in?: Maybe<String[] | String>;
  meaning_not_in?: Maybe<String[] | String>;
  meaning_lt?: Maybe<String>;
  meaning_lte?: Maybe<String>;
  meaning_gt?: Maybe<String>;
  meaning_gte?: Maybe<String>;
  meaning_contains?: Maybe<String>;
  meaning_not_contains?: Maybe<String>;
  meaning_starts_with?: Maybe<String>;
  meaning_not_starts_with?: Maybe<String>;
  meaning_ends_with?: Maybe<String>;
  meaning_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StrengthWhereInput[] | StrengthWhereInput>;
  OR?: Maybe<StrengthWhereInput[] | StrengthWhereInput>;
  NOT?: Maybe<StrengthWhereInput[] | StrengthWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  title: Maybe<String>;
  id?: Maybe<ID_Input>;
}>;

export type IndicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type IndicatorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type KeywordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type ScenarioWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type StrengthWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  events?: Maybe<EventCreateManyWithoutCategoriesInput>;
}

export interface EventCreateManyWithoutCategoriesInput {
  create?: Maybe<
    EventCreateWithoutCategoriesInput[] | EventCreateWithoutCategoriesInput
  >;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutCategoriesInput {
  date?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  href?: Maybe<String>;
  source?: Maybe<String>;
  id?: Maybe<ID_Input>;
  read?: Maybe<Boolean>;
  indications?: Maybe<IndicationCreateManyWithoutEventInput>;
}

export interface IndicationCreateManyWithoutEventInput {
  create?: Maybe<
    IndicationCreateWithoutEventInput[] | IndicationCreateWithoutEventInput
  >;
  connect?: Maybe<IndicationWhereUniqueInput[] | IndicationWhereUniqueInput>;
}

export interface IndicationCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  indicator: IndicatorCreateOneInput;
  strength: StrengthCreateOneInput;
}

export interface IndicatorCreateOneInput {
  create?: Maybe<IndicatorCreateInput>;
  connect?: Maybe<IndicatorWhereUniqueInput>;
}

export interface IndicatorCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  keywords?: Maybe<KeywordCreateManyInput>;
  scenarios?: Maybe<ScenarioCreateManyWithoutIndicatorsInput>;
}

export interface KeywordCreateManyInput {
  create?: Maybe<KeywordCreateInput[] | KeywordCreateInput>;
  connect?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
}

export interface KeywordCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ScenarioCreateManyWithoutIndicatorsInput {
  create?: Maybe<
    | ScenarioCreateWithoutIndicatorsInput[]
    | ScenarioCreateWithoutIndicatorsInput
  >;
  connect?: Maybe<ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput>;
}

export interface ScenarioCreateWithoutIndicatorsInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface StrengthCreateOneInput {
  create?: Maybe<StrengthCreateInput>;
  connect?: Maybe<StrengthWhereUniqueInput>;
}

export interface StrengthCreateInput {
  id?: Maybe<ID_Input>;
  strength?: Maybe<Int>;
  meaning?: Maybe<String>;
}

export interface CategoryUpdateInput {
  name?: Maybe<String>;
  events?: Maybe<EventUpdateManyWithoutCategoriesInput>;
}

export interface EventUpdateManyWithoutCategoriesInput {
  create?: Maybe<
    EventCreateWithoutCategoriesInput[] | EventCreateWithoutCategoriesInput
  >;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutCategoriesInput[]
    | EventUpdateWithWhereUniqueWithoutCategoriesInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutCategoriesInput[]
    | EventUpsertWithWhereUniqueWithoutCategoriesInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutCategoriesInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutCategoriesDataInput;
}

export interface EventUpdateWithoutCategoriesDataInput {
  date?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  href?: Maybe<String>;
  source?: Maybe<String>;
  read?: Maybe<Boolean>;
  indications?: Maybe<IndicationUpdateManyWithoutEventInput>;
}

export interface IndicationUpdateManyWithoutEventInput {
  create?: Maybe<
    IndicationCreateWithoutEventInput[] | IndicationCreateWithoutEventInput
  >;
  delete?: Maybe<IndicationWhereUniqueInput[] | IndicationWhereUniqueInput>;
  connect?: Maybe<IndicationWhereUniqueInput[] | IndicationWhereUniqueInput>;
  set?: Maybe<IndicationWhereUniqueInput[] | IndicationWhereUniqueInput>;
  disconnect?: Maybe<IndicationWhereUniqueInput[] | IndicationWhereUniqueInput>;
  update?: Maybe<
    | IndicationUpdateWithWhereUniqueWithoutEventInput[]
    | IndicationUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | IndicationUpsertWithWhereUniqueWithoutEventInput[]
    | IndicationUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<IndicationScalarWhereInput[] | IndicationScalarWhereInput>;
}

export interface IndicationUpdateWithWhereUniqueWithoutEventInput {
  where: IndicationWhereUniqueInput;
  data: IndicationUpdateWithoutEventDataInput;
}

export interface IndicationUpdateWithoutEventDataInput {
  indicator?: Maybe<IndicatorUpdateOneRequiredInput>;
  strength?: Maybe<StrengthUpdateOneRequiredInput>;
}

export interface IndicatorUpdateOneRequiredInput {
  create?: Maybe<IndicatorCreateInput>;
  update?: Maybe<IndicatorUpdateDataInput>;
  upsert?: Maybe<IndicatorUpsertNestedInput>;
  connect?: Maybe<IndicatorWhereUniqueInput>;
}

export interface IndicatorUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  keywords?: Maybe<KeywordUpdateManyInput>;
  scenarios?: Maybe<ScenarioUpdateManyWithoutIndicatorsInput>;
}

export interface KeywordUpdateManyInput {
  create?: Maybe<KeywordCreateInput[] | KeywordCreateInput>;
  update?: Maybe<
    | KeywordUpdateWithWhereUniqueNestedInput[]
    | KeywordUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | KeywordUpsertWithWhereUniqueNestedInput[]
    | KeywordUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
  connect?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
  set?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
  disconnect?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
  deleteMany?: Maybe<KeywordScalarWhereInput[] | KeywordScalarWhereInput>;
  updateMany?: Maybe<
    | KeywordUpdateManyWithWhereNestedInput[]
    | KeywordUpdateManyWithWhereNestedInput
  >;
}

export interface KeywordUpdateWithWhereUniqueNestedInput {
  where: KeywordWhereUniqueInput;
  data: KeywordUpdateDataInput;
}

export interface KeywordUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface KeywordUpsertWithWhereUniqueNestedInput {
  where: KeywordWhereUniqueInput;
  update: KeywordUpdateDataInput;
  create: KeywordCreateInput;
}

export interface KeywordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<KeywordScalarWhereInput[] | KeywordScalarWhereInput>;
  OR?: Maybe<KeywordScalarWhereInput[] | KeywordScalarWhereInput>;
  NOT?: Maybe<KeywordScalarWhereInput[] | KeywordScalarWhereInput>;
}

export interface KeywordUpdateManyWithWhereNestedInput {
  where: KeywordScalarWhereInput;
  data: KeywordUpdateManyDataInput;
}

export interface KeywordUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ScenarioUpdateManyWithoutIndicatorsInput {
  create?: Maybe<
    | ScenarioCreateWithoutIndicatorsInput[]
    | ScenarioCreateWithoutIndicatorsInput
  >;
  delete?: Maybe<ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput>;
  connect?: Maybe<ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput>;
  set?: Maybe<ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput>;
  disconnect?: Maybe<ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput>;
  update?: Maybe<
    | ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput[]
    | ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput
  >;
  upsert?: Maybe<
    | ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput[]
    | ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput
  >;
  deleteMany?: Maybe<ScenarioScalarWhereInput[] | ScenarioScalarWhereInput>;
  updateMany?: Maybe<
    | ScenarioUpdateManyWithWhereNestedInput[]
    | ScenarioUpdateManyWithWhereNestedInput
  >;
}

export interface ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput {
  where: ScenarioWhereUniqueInput;
  data: ScenarioUpdateWithoutIndicatorsDataInput;
}

export interface ScenarioUpdateWithoutIndicatorsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput {
  where: ScenarioWhereUniqueInput;
  update: ScenarioUpdateWithoutIndicatorsDataInput;
  create: ScenarioCreateWithoutIndicatorsInput;
}

export interface ScenarioScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ScenarioScalarWhereInput[] | ScenarioScalarWhereInput>;
  OR?: Maybe<ScenarioScalarWhereInput[] | ScenarioScalarWhereInput>;
  NOT?: Maybe<ScenarioScalarWhereInput[] | ScenarioScalarWhereInput>;
}

export interface ScenarioUpdateManyWithWhereNestedInput {
  where: ScenarioScalarWhereInput;
  data: ScenarioUpdateManyDataInput;
}

export interface ScenarioUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface IndicatorUpsertNestedInput {
  update: IndicatorUpdateDataInput;
  create: IndicatorCreateInput;
}

export interface StrengthUpdateOneRequiredInput {
  create?: Maybe<StrengthCreateInput>;
  update?: Maybe<StrengthUpdateDataInput>;
  upsert?: Maybe<StrengthUpsertNestedInput>;
  connect?: Maybe<StrengthWhereUniqueInput>;
}

export interface StrengthUpdateDataInput {
  strength?: Maybe<Int>;
  meaning?: Maybe<String>;
}

export interface StrengthUpsertNestedInput {
  update: StrengthUpdateDataInput;
  create: StrengthCreateInput;
}

export interface IndicationUpsertWithWhereUniqueWithoutEventInput {
  where: IndicationWhereUniqueInput;
  update: IndicationUpdateWithoutEventDataInput;
  create: IndicationCreateWithoutEventInput;
}

export interface IndicationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IndicationScalarWhereInput[] | IndicationScalarWhereInput>;
  OR?: Maybe<IndicationScalarWhereInput[] | IndicationScalarWhereInput>;
  NOT?: Maybe<IndicationScalarWhereInput[] | IndicationScalarWhereInput>;
}

export interface EventUpsertWithWhereUniqueWithoutCategoriesInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutCategoriesDataInput;
  create: EventCreateWithoutCategoriesInput;
}

export interface EventScalarWhereInput {
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  href?: Maybe<String>;
  href_not?: Maybe<String>;
  href_in?: Maybe<String[] | String>;
  href_not_in?: Maybe<String[] | String>;
  href_lt?: Maybe<String>;
  href_lte?: Maybe<String>;
  href_gt?: Maybe<String>;
  href_gte?: Maybe<String>;
  href_contains?: Maybe<String>;
  href_not_contains?: Maybe<String>;
  href_starts_with?: Maybe<String>;
  href_not_starts_with?: Maybe<String>;
  href_ends_with?: Maybe<String>;
  href_not_ends_with?: Maybe<String>;
  source?: Maybe<String>;
  source_not?: Maybe<String>;
  source_in?: Maybe<String[] | String>;
  source_not_in?: Maybe<String[] | String>;
  source_lt?: Maybe<String>;
  source_lte?: Maybe<String>;
  source_gt?: Maybe<String>;
  source_gte?: Maybe<String>;
  source_contains?: Maybe<String>;
  source_not_contains?: Maybe<String>;
  source_starts_with?: Maybe<String>;
  source_not_starts_with?: Maybe<String>;
  source_ends_with?: Maybe<String>;
  source_not_ends_with?: Maybe<String>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  read?: Maybe<Boolean>;
  read_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  date?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  href?: Maybe<String>;
  source?: Maybe<String>;
  read?: Maybe<Boolean>;
}

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface EventCreateInput {
  date?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  href?: Maybe<String>;
  source?: Maybe<String>;
  id?: Maybe<ID_Input>;
  read?: Maybe<Boolean>;
  indications?: Maybe<IndicationCreateManyWithoutEventInput>;
  categories?: Maybe<CategoryCreateManyWithoutEventsInput>;
}

export interface CategoryCreateManyWithoutEventsInput {
  create?: Maybe<
    CategoryCreateWithoutEventsInput[] | CategoryCreateWithoutEventsInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutEventsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface EventUpdateInput {
  date?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  href?: Maybe<String>;
  source?: Maybe<String>;
  read?: Maybe<Boolean>;
  indications?: Maybe<IndicationUpdateManyWithoutEventInput>;
  categories?: Maybe<CategoryUpdateManyWithoutEventsInput>;
}

export interface CategoryUpdateManyWithoutEventsInput {
  create?: Maybe<
    CategoryCreateWithoutEventsInput[] | CategoryCreateWithoutEventsInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutEventsInput[]
    | CategoryUpdateWithWhereUniqueWithoutEventsInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutEventsInput[]
    | CategoryUpsertWithWhereUniqueWithoutEventsInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateWithWhereUniqueWithoutEventsInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutEventsDataInput;
}

export interface CategoryUpdateWithoutEventsDataInput {
  name?: Maybe<String>;
}

export interface CategoryUpsertWithWhereUniqueWithoutEventsInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutEventsDataInput;
  create: CategoryCreateWithoutEventsInput;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface CategoryUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface EventUpdateManyMutationInput {
  date?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  href?: Maybe<String>;
  source?: Maybe<String>;
  read?: Maybe<Boolean>;
}

export interface IndicationCreateInput {
  id?: Maybe<ID_Input>;
  indicator: IndicatorCreateOneInput;
  event: EventCreateOneWithoutIndicationsInput;
  strength: StrengthCreateOneInput;
}

export interface EventCreateOneWithoutIndicationsInput {
  create?: Maybe<EventCreateWithoutIndicationsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventCreateWithoutIndicationsInput {
  date?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  href?: Maybe<String>;
  source?: Maybe<String>;
  id?: Maybe<ID_Input>;
  read?: Maybe<Boolean>;
  categories?: Maybe<CategoryCreateManyWithoutEventsInput>;
}

export interface IndicationUpdateInput {
  indicator?: Maybe<IndicatorUpdateOneRequiredInput>;
  event?: Maybe<EventUpdateOneRequiredWithoutIndicationsInput>;
  strength?: Maybe<StrengthUpdateOneRequiredInput>;
}

export interface EventUpdateOneRequiredWithoutIndicationsInput {
  create?: Maybe<EventCreateWithoutIndicationsInput>;
  update?: Maybe<EventUpdateWithoutIndicationsDataInput>;
  upsert?: Maybe<EventUpsertWithoutIndicationsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventUpdateWithoutIndicationsDataInput {
  date?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  href?: Maybe<String>;
  source?: Maybe<String>;
  read?: Maybe<Boolean>;
  categories?: Maybe<CategoryUpdateManyWithoutEventsInput>;
}

export interface EventUpsertWithoutIndicationsInput {
  update: EventUpdateWithoutIndicationsDataInput;
  create: EventCreateWithoutIndicationsInput;
}

export interface IndicatorUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  keywords?: Maybe<KeywordUpdateManyInput>;
  scenarios?: Maybe<ScenarioUpdateManyWithoutIndicatorsInput>;
}

export interface IndicatorUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface KeywordUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface KeywordUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ScenarioCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  indicators?: Maybe<IndicatorCreateManyWithoutScenariosInput>;
}

export interface IndicatorCreateManyWithoutScenariosInput {
  create?: Maybe<
    | IndicatorCreateWithoutScenariosInput[]
    | IndicatorCreateWithoutScenariosInput
  >;
  connect?: Maybe<IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput>;
}

export interface IndicatorCreateWithoutScenariosInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  keywords?: Maybe<KeywordCreateManyInput>;
}

export interface ScenarioUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  indicators?: Maybe<IndicatorUpdateManyWithoutScenariosInput>;
}

export interface IndicatorUpdateManyWithoutScenariosInput {
  create?: Maybe<
    | IndicatorCreateWithoutScenariosInput[]
    | IndicatorCreateWithoutScenariosInput
  >;
  delete?: Maybe<IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput>;
  connect?: Maybe<IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput>;
  set?: Maybe<IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput>;
  disconnect?: Maybe<IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput>;
  update?: Maybe<
    | IndicatorUpdateWithWhereUniqueWithoutScenariosInput[]
    | IndicatorUpdateWithWhereUniqueWithoutScenariosInput
  >;
  upsert?: Maybe<
    | IndicatorUpsertWithWhereUniqueWithoutScenariosInput[]
    | IndicatorUpsertWithWhereUniqueWithoutScenariosInput
  >;
  deleteMany?: Maybe<IndicatorScalarWhereInput[] | IndicatorScalarWhereInput>;
  updateMany?: Maybe<
    | IndicatorUpdateManyWithWhereNestedInput[]
    | IndicatorUpdateManyWithWhereNestedInput
  >;
}

export interface IndicatorUpdateWithWhereUniqueWithoutScenariosInput {
  where: IndicatorWhereUniqueInput;
  data: IndicatorUpdateWithoutScenariosDataInput;
}

export interface IndicatorUpdateWithoutScenariosDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  keywords?: Maybe<KeywordUpdateManyInput>;
}

export interface IndicatorUpsertWithWhereUniqueWithoutScenariosInput {
  where: IndicatorWhereUniqueInput;
  update: IndicatorUpdateWithoutScenariosDataInput;
  create: IndicatorCreateWithoutScenariosInput;
}

export interface IndicatorScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<IndicatorScalarWhereInput[] | IndicatorScalarWhereInput>;
  OR?: Maybe<IndicatorScalarWhereInput[] | IndicatorScalarWhereInput>;
  NOT?: Maybe<IndicatorScalarWhereInput[] | IndicatorScalarWhereInput>;
}

export interface IndicatorUpdateManyWithWhereNestedInput {
  where: IndicatorScalarWhereInput;
  data: IndicatorUpdateManyDataInput;
}

export interface IndicatorUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ScenarioUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface StrengthUpdateInput {
  strength?: Maybe<Int>;
  meaning?: Maybe<String>;
}

export interface StrengthUpdateManyMutationInput {
  strength?: Maybe<Int>;
  meaning?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface IndicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IndicationWhereInput>;
  AND?: Maybe<
    IndicationSubscriptionWhereInput[] | IndicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    IndicationSubscriptionWhereInput[] | IndicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    IndicationSubscriptionWhereInput[] | IndicationSubscriptionWhereInput
  >;
}

export interface IndicatorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IndicatorWhereInput>;
  AND?: Maybe<
    IndicatorSubscriptionWhereInput[] | IndicatorSubscriptionWhereInput
  >;
  OR?: Maybe<
    IndicatorSubscriptionWhereInput[] | IndicatorSubscriptionWhereInput
  >;
  NOT?: Maybe<
    IndicatorSubscriptionWhereInput[] | IndicatorSubscriptionWhereInput
  >;
}

export interface KeywordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<KeywordWhereInput>;
  AND?: Maybe<KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput>;
  OR?: Maybe<KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput>;
  NOT?: Maybe<KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput>;
}

export interface ScenarioSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ScenarioWhereInput>;
  AND?: Maybe<
    ScenarioSubscriptionWhereInput[] | ScenarioSubscriptionWhereInput
  >;
  OR?: Maybe<ScenarioSubscriptionWhereInput[] | ScenarioSubscriptionWhereInput>;
  NOT?: Maybe<
    ScenarioSubscriptionWhereInput[] | ScenarioSubscriptionWhereInput
  >;
}

export interface StrengthSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StrengthWhereInput>;
  AND?: Maybe<
    StrengthSubscriptionWhereInput[] | StrengthSubscriptionWhereInput
  >;
  OR?: Maybe<StrengthSubscriptionWhereInput[] | StrengthSubscriptionWhereInput>;
  NOT?: Maybe<
    StrengthSubscriptionWhereInput[] | StrengthSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Category {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Event {
  date?: DateTimeOutput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  id: ID_Output;
  read?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  date: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  href: () => Promise<String>;
  source: () => Promise<String>;
  id: () => Promise<ID_Output>;
  read: () => Promise<Boolean>;
  indications: <T = FragmentableArray<Indication>>(args?: {
    where?: IndicationWhereInput;
    orderBy?: IndicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  href: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  read: () => Promise<AsyncIterator<Boolean>>;
  indications: <T = Promise<AsyncIterator<IndicationSubscription>>>(args?: {
    where?: IndicationWhereInput;
    orderBy?: IndicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  date: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  href: () => Promise<String>;
  source: () => Promise<String>;
  id: () => Promise<ID_Output>;
  read: () => Promise<Boolean>;
  indications: <T = FragmentableArray<Indication>>(args?: {
    where?: IndicationWhereInput;
    orderBy?: IndicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Indication {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface IndicationPromise extends Promise<Indication>, Fragmentable {
  id: () => Promise<ID_Output>;
  indicator: <T = IndicatorPromise>() => T;
  event: <T = EventPromise>() => T;
  strength: <T = StrengthPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface IndicationSubscription
  extends Promise<AsyncIterator<Indication>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  indicator: <T = IndicatorSubscription>() => T;
  event: <T = EventSubscription>() => T;
  strength: <T = StrengthSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IndicationNullablePromise
  extends Promise<Indication | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  indicator: <T = IndicatorPromise>() => T;
  event: <T = EventPromise>() => T;
  strength: <T = StrengthPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Indicator {
  id: ID_Output;
  name?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface IndicatorPromise extends Promise<Indicator>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  keywords: <T = FragmentableArray<Keyword>>(args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  scenarios: <T = FragmentableArray<Scenario>>(args?: {
    where?: ScenarioWhereInput;
    orderBy?: ScenarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface IndicatorSubscription
  extends Promise<AsyncIterator<Indicator>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  keywords: <T = Promise<AsyncIterator<KeywordSubscription>>>(args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  scenarios: <T = Promise<AsyncIterator<ScenarioSubscription>>>(args?: {
    where?: ScenarioWhereInput;
    orderBy?: ScenarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IndicatorNullablePromise
  extends Promise<Indicator | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  keywords: <T = FragmentableArray<Keyword>>(args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  scenarios: <T = FragmentableArray<Scenario>>(args?: {
    where?: ScenarioWhereInput;
    orderBy?: ScenarioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Keyword {
  id: ID_Output;
  name?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface KeywordPromise extends Promise<Keyword>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface KeywordSubscription
  extends Promise<AsyncIterator<Keyword>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface KeywordNullablePromise
  extends Promise<Keyword | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Scenario {
  id: ID_Output;
  name?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ScenarioPromise extends Promise<Scenario>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  indicators: <T = FragmentableArray<Indicator>>(args?: {
    where?: IndicatorWhereInput;
    orderBy?: IndicatorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ScenarioSubscription
  extends Promise<AsyncIterator<Scenario>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  indicators: <T = Promise<AsyncIterator<IndicatorSubscription>>>(args?: {
    where?: IndicatorWhereInput;
    orderBy?: IndicatorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ScenarioNullablePromise
  extends Promise<Scenario | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  indicators: <T = FragmentableArray<Indicator>>(args?: {
    where?: IndicatorWhereInput;
    orderBy?: IndicatorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Strength {
  id: ID_Output;
  strength?: Int;
  meaning?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StrengthPromise extends Promise<Strength>, Fragmentable {
  id: () => Promise<ID_Output>;
  strength: () => Promise<Int>;
  meaning: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StrengthSubscription
  extends Promise<AsyncIterator<Strength>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  strength: () => Promise<AsyncIterator<Int>>;
  meaning: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StrengthNullablePromise
  extends Promise<Strength | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  strength: () => Promise<Int>;
  meaning: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IndicationConnection {
  pageInfo: PageInfo;
  edges: IndicationEdge[];
}

export interface IndicationConnectionPromise
  extends Promise<IndicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IndicationEdge>>() => T;
  aggregate: <T = AggregateIndicationPromise>() => T;
}

export interface IndicationConnectionSubscription
  extends Promise<AsyncIterator<IndicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IndicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIndicationSubscription>() => T;
}

export interface IndicationEdge {
  node: Indication;
  cursor: String;
}

export interface IndicationEdgePromise
  extends Promise<IndicationEdge>,
    Fragmentable {
  node: <T = IndicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IndicationEdgeSubscription
  extends Promise<AsyncIterator<IndicationEdge>>,
    Fragmentable {
  node: <T = IndicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIndication {
  count: Int;
}

export interface AggregateIndicationPromise
  extends Promise<AggregateIndication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIndicationSubscription
  extends Promise<AsyncIterator<AggregateIndication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IndicatorConnection {
  pageInfo: PageInfo;
  edges: IndicatorEdge[];
}

export interface IndicatorConnectionPromise
  extends Promise<IndicatorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IndicatorEdge>>() => T;
  aggregate: <T = AggregateIndicatorPromise>() => T;
}

export interface IndicatorConnectionSubscription
  extends Promise<AsyncIterator<IndicatorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IndicatorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIndicatorSubscription>() => T;
}

export interface IndicatorEdge {
  node: Indicator;
  cursor: String;
}

export interface IndicatorEdgePromise
  extends Promise<IndicatorEdge>,
    Fragmentable {
  node: <T = IndicatorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IndicatorEdgeSubscription
  extends Promise<AsyncIterator<IndicatorEdge>>,
    Fragmentable {
  node: <T = IndicatorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIndicator {
  count: Int;
}

export interface AggregateIndicatorPromise
  extends Promise<AggregateIndicator>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIndicatorSubscription
  extends Promise<AsyncIterator<AggregateIndicator>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KeywordConnection {
  pageInfo: PageInfo;
  edges: KeywordEdge[];
}

export interface KeywordConnectionPromise
  extends Promise<KeywordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KeywordEdge>>() => T;
  aggregate: <T = AggregateKeywordPromise>() => T;
}

export interface KeywordConnectionSubscription
  extends Promise<AsyncIterator<KeywordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KeywordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKeywordSubscription>() => T;
}

export interface KeywordEdge {
  node: Keyword;
  cursor: String;
}

export interface KeywordEdgePromise extends Promise<KeywordEdge>, Fragmentable {
  node: <T = KeywordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KeywordEdgeSubscription
  extends Promise<AsyncIterator<KeywordEdge>>,
    Fragmentable {
  node: <T = KeywordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKeyword {
  count: Int;
}

export interface AggregateKeywordPromise
  extends Promise<AggregateKeyword>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKeywordSubscription
  extends Promise<AsyncIterator<AggregateKeyword>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScenarioConnection {
  pageInfo: PageInfo;
  edges: ScenarioEdge[];
}

export interface ScenarioConnectionPromise
  extends Promise<ScenarioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScenarioEdge>>() => T;
  aggregate: <T = AggregateScenarioPromise>() => T;
}

export interface ScenarioConnectionSubscription
  extends Promise<AsyncIterator<ScenarioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScenarioEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScenarioSubscription>() => T;
}

export interface ScenarioEdge {
  node: Scenario;
  cursor: String;
}

export interface ScenarioEdgePromise
  extends Promise<ScenarioEdge>,
    Fragmentable {
  node: <T = ScenarioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScenarioEdgeSubscription
  extends Promise<AsyncIterator<ScenarioEdge>>,
    Fragmentable {
  node: <T = ScenarioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScenario {
  count: Int;
}

export interface AggregateScenarioPromise
  extends Promise<AggregateScenario>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScenarioSubscription
  extends Promise<AsyncIterator<AggregateScenario>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StrengthConnection {
  pageInfo: PageInfo;
  edges: StrengthEdge[];
}

export interface StrengthConnectionPromise
  extends Promise<StrengthConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StrengthEdge>>() => T;
  aggregate: <T = AggregateStrengthPromise>() => T;
}

export interface StrengthConnectionSubscription
  extends Promise<AsyncIterator<StrengthConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StrengthEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStrengthSubscription>() => T;
}

export interface StrengthEdge {
  node: Strength;
  cursor: String;
}

export interface StrengthEdgePromise
  extends Promise<StrengthEdge>,
    Fragmentable {
  node: <T = StrengthPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StrengthEdgeSubscription
  extends Promise<AsyncIterator<StrengthEdge>>,
    Fragmentable {
  node: <T = StrengthSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStrength {
  count: Int;
}

export interface AggregateStrengthPromise
  extends Promise<AggregateStrength>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStrengthSubscription
  extends Promise<AsyncIterator<AggregateStrength>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  date?: DateTimeOutput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  id: ID_Output;
  read?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  date: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  href: () => Promise<String>;
  source: () => Promise<String>;
  id: () => Promise<ID_Output>;
  read: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  href: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  read: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IndicationSubscriptionPayload {
  mutation: MutationType;
  node: Indication;
  updatedFields: String[];
  previousValues: IndicationPreviousValues;
}

export interface IndicationSubscriptionPayloadPromise
  extends Promise<IndicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IndicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IndicationPreviousValuesPromise>() => T;
}

export interface IndicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IndicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IndicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IndicationPreviousValuesSubscription>() => T;
}

export interface IndicationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface IndicationPreviousValuesPromise
  extends Promise<IndicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface IndicationPreviousValuesSubscription
  extends Promise<AsyncIterator<IndicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IndicatorSubscriptionPayload {
  mutation: MutationType;
  node: Indicator;
  updatedFields: String[];
  previousValues: IndicatorPreviousValues;
}

export interface IndicatorSubscriptionPayloadPromise
  extends Promise<IndicatorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IndicatorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IndicatorPreviousValuesPromise>() => T;
}

export interface IndicatorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IndicatorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IndicatorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IndicatorPreviousValuesSubscription>() => T;
}

export interface IndicatorPreviousValues {
  id: ID_Output;
  name?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface IndicatorPreviousValuesPromise
  extends Promise<IndicatorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface IndicatorPreviousValuesSubscription
  extends Promise<AsyncIterator<IndicatorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface KeywordSubscriptionPayload {
  mutation: MutationType;
  node: Keyword;
  updatedFields: String[];
  previousValues: KeywordPreviousValues;
}

export interface KeywordSubscriptionPayloadPromise
  extends Promise<KeywordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KeywordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KeywordPreviousValuesPromise>() => T;
}

export interface KeywordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KeywordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KeywordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KeywordPreviousValuesSubscription>() => T;
}

export interface KeywordPreviousValues {
  id: ID_Output;
  name?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface KeywordPreviousValuesPromise
  extends Promise<KeywordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface KeywordPreviousValuesSubscription
  extends Promise<AsyncIterator<KeywordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ScenarioSubscriptionPayload {
  mutation: MutationType;
  node: Scenario;
  updatedFields: String[];
  previousValues: ScenarioPreviousValues;
}

export interface ScenarioSubscriptionPayloadPromise
  extends Promise<ScenarioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScenarioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScenarioPreviousValuesPromise>() => T;
}

export interface ScenarioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScenarioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScenarioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScenarioPreviousValuesSubscription>() => T;
}

export interface ScenarioPreviousValues {
  id: ID_Output;
  name?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ScenarioPreviousValuesPromise
  extends Promise<ScenarioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ScenarioPreviousValuesSubscription
  extends Promise<AsyncIterator<ScenarioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StrengthSubscriptionPayload {
  mutation: MutationType;
  node: Strength;
  updatedFields: String[];
  previousValues: StrengthPreviousValues;
}

export interface StrengthSubscriptionPayloadPromise
  extends Promise<StrengthSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StrengthPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StrengthPreviousValuesPromise>() => T;
}

export interface StrengthSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StrengthSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StrengthSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StrengthPreviousValuesSubscription>() => T;
}

export interface StrengthPreviousValues {
  id: ID_Output;
  strength?: Int;
  meaning?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StrengthPreviousValuesPromise
  extends Promise<StrengthPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  strength: () => Promise<Int>;
  meaning: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StrengthPreviousValuesSubscription
  extends Promise<AsyncIterator<StrengthPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  strength: () => Promise<AsyncIterator<Int>>;
  meaning: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Keyword",
    embedded: false
  },
  {
    name: "Scenario",
    embedded: false
  },
  {
    name: "Indicator",
    embedded: false
  },
  {
    name: "Indication",
    embedded: false
  },
  {
    name: "Strength",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/faktor-10-d77a43/workspace/dev`
});
export const prisma = new Prisma();
