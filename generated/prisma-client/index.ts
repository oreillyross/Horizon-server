// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  indication: (where?: IndicationWhereInput) => Promise<boolean>;
  indicator: (where?: IndicatorWhereInput) => Promise<boolean>;
  keyword: (where?: KeywordWhereInput) => Promise<boolean>;
  scenario: (where?: ScenarioWhereInput) => Promise<boolean>;
  strength: (where?: StrengthWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryPromise;
  categories: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Category>;
  categoriesConnection: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventPromise;
  events: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Event>;
  eventsConnection: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EventConnectionPromise;
  indication: (where: IndicationWhereUniqueInput) => IndicationPromise;
  indications: (
    args?: {
      where?: IndicationWhereInput;
      orderBy?: IndicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Indication>;
  indicationsConnection: (
    args?: {
      where?: IndicationWhereInput;
      orderBy?: IndicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IndicationConnectionPromise;
  indicator: (where: IndicatorWhereUniqueInput) => IndicatorPromise;
  indicators: (
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Indicator>;
  indicatorsConnection: (
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IndicatorConnectionPromise;
  keyword: (where: KeywordWhereUniqueInput) => KeywordPromise;
  keywords: (
    args?: {
      where?: KeywordWhereInput;
      orderBy?: KeywordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Keyword>;
  keywordsConnection: (
    args?: {
      where?: KeywordWhereInput;
      orderBy?: KeywordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => KeywordConnectionPromise;
  scenario: (where: ScenarioWhereUniqueInput) => ScenarioPromise;
  scenarios: (
    args?: {
      where?: ScenarioWhereInput;
      orderBy?: ScenarioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Scenario>;
  scenariosConnection: (
    args?: {
      where?: ScenarioWhereInput;
      orderBy?: ScenarioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ScenarioConnectionPromise;
  strength: (where: StrengthWhereUniqueInput) => StrengthPromise;
  strengths: (
    args?: {
      where?: StrengthWhereInput;
      orderBy?: StrengthOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Strength>;
  strengthsConnection: (
    args?: {
      where?: StrengthWhereInput;
      orderBy?: StrengthOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StrengthConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (
    args: { data: CategoryUpdateInput; where: CategoryWhereUniqueInput }
  ) => CategoryPromise;
  updateManyCategories: (
    args: { data: CategoryUpdateManyMutationInput; where?: CategoryWhereInput }
  ) => BatchPayloadPromise;
  upsertCategory: (
    args: {
      where: CategoryWhereUniqueInput;
      create: CategoryCreateInput;
      update: CategoryUpdateInput;
    }
  ) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (
    args: { data: EventUpdateInput; where: EventWhereUniqueInput }
  ) => EventPromise;
  updateManyEvents: (
    args: { data: EventUpdateManyMutationInput; where?: EventWhereInput }
  ) => BatchPayloadPromise;
  upsertEvent: (
    args: {
      where: EventWhereUniqueInput;
      create: EventCreateInput;
      update: EventUpdateInput;
    }
  ) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createIndication: (data: IndicationCreateInput) => IndicationPromise;
  updateIndication: (
    args: { data: IndicationUpdateInput; where: IndicationWhereUniqueInput }
  ) => IndicationPromise;
  upsertIndication: (
    args: {
      where: IndicationWhereUniqueInput;
      create: IndicationCreateInput;
      update: IndicationUpdateInput;
    }
  ) => IndicationPromise;
  deleteIndication: (where: IndicationWhereUniqueInput) => IndicationPromise;
  deleteManyIndications: (where?: IndicationWhereInput) => BatchPayloadPromise;
  createIndicator: (data: IndicatorCreateInput) => IndicatorPromise;
  updateIndicator: (
    args: { data: IndicatorUpdateInput; where: IndicatorWhereUniqueInput }
  ) => IndicatorPromise;
  updateManyIndicators: (
    args: {
      data: IndicatorUpdateManyMutationInput;
      where?: IndicatorWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertIndicator: (
    args: {
      where: IndicatorWhereUniqueInput;
      create: IndicatorCreateInput;
      update: IndicatorUpdateInput;
    }
  ) => IndicatorPromise;
  deleteIndicator: (where: IndicatorWhereUniqueInput) => IndicatorPromise;
  deleteManyIndicators: (where?: IndicatorWhereInput) => BatchPayloadPromise;
  createKeyword: (data: KeywordCreateInput) => KeywordPromise;
  updateKeyword: (
    args: { data: KeywordUpdateInput; where: KeywordWhereUniqueInput }
  ) => KeywordPromise;
  updateManyKeywords: (
    args: { data: KeywordUpdateManyMutationInput; where?: KeywordWhereInput }
  ) => BatchPayloadPromise;
  upsertKeyword: (
    args: {
      where: KeywordWhereUniqueInput;
      create: KeywordCreateInput;
      update: KeywordUpdateInput;
    }
  ) => KeywordPromise;
  deleteKeyword: (where: KeywordWhereUniqueInput) => KeywordPromise;
  deleteManyKeywords: (where?: KeywordWhereInput) => BatchPayloadPromise;
  createScenario: (data: ScenarioCreateInput) => ScenarioPromise;
  updateScenario: (
    args: { data: ScenarioUpdateInput; where: ScenarioWhereUniqueInput }
  ) => ScenarioPromise;
  updateManyScenarios: (
    args: { data: ScenarioUpdateManyMutationInput; where?: ScenarioWhereInput }
  ) => BatchPayloadPromise;
  upsertScenario: (
    args: {
      where: ScenarioWhereUniqueInput;
      create: ScenarioCreateInput;
      update: ScenarioUpdateInput;
    }
  ) => ScenarioPromise;
  deleteScenario: (where: ScenarioWhereUniqueInput) => ScenarioPromise;
  deleteManyScenarios: (where?: ScenarioWhereInput) => BatchPayloadPromise;
  createStrength: (data: StrengthCreateInput) => StrengthPromise;
  updateStrength: (
    args: { data: StrengthUpdateInput; where: StrengthWhereUniqueInput }
  ) => StrengthPromise;
  updateManyStrengths: (
    args: { data: StrengthUpdateManyMutationInput; where?: StrengthWhereInput }
  ) => BatchPayloadPromise;
  upsertStrength: (
    args: {
      where: StrengthWhereUniqueInput;
      create: StrengthCreateInput;
      update: StrengthUpdateInput;
    }
  ) => StrengthPromise;
  deleteStrength: (where: StrengthWhereUniqueInput) => StrengthPromise;
  deleteManyStrengths: (where?: StrengthWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  indication: (
    where?: IndicationSubscriptionWhereInput
  ) => IndicationSubscriptionPayloadSubscription;
  indicator: (
    where?: IndicatorSubscriptionWhereInput
  ) => IndicatorSubscriptionPayloadSubscription;
  keyword: (
    where?: KeywordSubscriptionWhereInput
  ) => KeywordSubscriptionPayloadSubscription;
  scenario: (
    where?: ScenarioSubscriptionWhereInput
  ) => ScenarioSubscriptionPayloadSubscription;
  strength: (
    where?: StrengthSubscriptionWhereInput
  ) => StrengthSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EventOrderByInput =
  | "date_ASC"
  | "date_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "href_ASC"
  | "href_DESC"
  | "source_ASC"
  | "source_DESC"
  | "id_ASC"
  | "id_DESC"
  | "read_ASC"
  | "read_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IndicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type KeywordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IndicatorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ScenarioOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StrengthOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "strength_ASC"
  | "strength_DESC"
  | "meaning_ASC"
  | "meaning_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EventWhereInput {
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  href?: String;
  href_not?: String;
  href_in?: String[] | String;
  href_not_in?: String[] | String;
  href_lt?: String;
  href_lte?: String;
  href_gt?: String;
  href_gte?: String;
  href_contains?: String;
  href_not_contains?: String;
  href_starts_with?: String;
  href_not_starts_with?: String;
  href_ends_with?: String;
  href_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  read?: Boolean;
  read_not?: Boolean;
  indications_every?: IndicationWhereInput;
  indications_some?: IndicationWhereInput;
  indications_none?: IndicationWhereInput;
  categories_every?: CategoryWhereInput;
  categories_some?: CategoryWhereInput;
  categories_none?: CategoryWhereInput;
  AND?: EventWhereInput[] | EventWhereInput;
  OR?: EventWhereInput[] | EventWhereInput;
  NOT?: EventWhereInput[] | EventWhereInput;
}

export interface IndicationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  indicator?: IndicatorWhereInput;
  event?: EventWhereInput;
  strength?: StrengthWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: IndicationWhereInput[] | IndicationWhereInput;
  OR?: IndicationWhereInput[] | IndicationWhereInput;
  NOT?: IndicationWhereInput[] | IndicationWhereInput;
}

export interface IndicatorWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  keywords_every?: KeywordWhereInput;
  keywords_some?: KeywordWhereInput;
  keywords_none?: KeywordWhereInput;
  scenarios_every?: ScenarioWhereInput;
  scenarios_some?: ScenarioWhereInput;
  scenarios_none?: ScenarioWhereInput;
  AND?: IndicatorWhereInput[] | IndicatorWhereInput;
  OR?: IndicatorWhereInput[] | IndicatorWhereInput;
  NOT?: IndicatorWhereInput[] | IndicatorWhereInput;
}

export interface KeywordWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  indicators_every?: IndicatorWhereInput;
  indicators_some?: IndicatorWhereInput;
  indicators_none?: IndicatorWhereInput;
  AND?: KeywordWhereInput[] | KeywordWhereInput;
  OR?: KeywordWhereInput[] | KeywordWhereInput;
  NOT?: KeywordWhereInput[] | KeywordWhereInput;
}

export interface ScenarioWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  indicators_every?: IndicatorWhereInput;
  indicators_some?: IndicatorWhereInput;
  indicators_none?: IndicatorWhereInput;
  AND?: ScenarioWhereInput[] | ScenarioWhereInput;
  OR?: ScenarioWhereInput[] | ScenarioWhereInput;
  NOT?: ScenarioWhereInput[] | ScenarioWhereInput;
}

export interface StrengthWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  strength?: Int;
  strength_not?: Int;
  strength_in?: Int[] | Int;
  strength_not_in?: Int[] | Int;
  strength_lt?: Int;
  strength_lte?: Int;
  strength_gt?: Int;
  strength_gte?: Int;
  meaning?: String;
  meaning_not?: String;
  meaning_in?: String[] | String;
  meaning_not_in?: String[] | String;
  meaning_lt?: String;
  meaning_lte?: String;
  meaning_gt?: String;
  meaning_gte?: String;
  meaning_contains?: String;
  meaning_not_contains?: String;
  meaning_starts_with?: String;
  meaning_not_starts_with?: String;
  meaning_ends_with?: String;
  meaning_not_ends_with?: String;
  AND?: StrengthWhereInput[] | StrengthWhereInput;
  OR?: StrengthWhereInput[] | StrengthWhereInput;
  NOT?: StrengthWhereInput[] | StrengthWhereInput;
}

export interface CategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  AND?: CategoryWhereInput[] | CategoryWhereInput;
  OR?: CategoryWhereInput[] | CategoryWhereInput;
  NOT?: CategoryWhereInput[] | CategoryWhereInput;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type IndicationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type IndicatorWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type KeywordWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ScenarioWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type StrengthWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface CategoryCreateInput {
  name: String;
  events?: EventCreateManyWithoutCategoriesInput;
}

export interface EventCreateManyWithoutCategoriesInput {
  create?:
    | EventCreateWithoutCategoriesInput[]
    | EventCreateWithoutCategoriesInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface EventCreateWithoutCategoriesInput {
  date?: DateTimeInput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  read?: Boolean;
  indications?: IndicationCreateManyWithoutEventInput;
}

export interface IndicationCreateManyWithoutEventInput {
  create?:
    | IndicationCreateWithoutEventInput[]
    | IndicationCreateWithoutEventInput;
  connect?: IndicationWhereUniqueInput[] | IndicationWhereUniqueInput;
}

export interface IndicationCreateWithoutEventInput {
  indicator: IndicatorCreateOneInput;
  strength: StrengthCreateOneInput;
}

export interface IndicatorCreateOneInput {
  create?: IndicatorCreateInput;
  connect?: IndicatorWhereUniqueInput;
}

export interface IndicatorCreateInput {
  name?: String;
  description?: String;
  keywords?: KeywordCreateManyWithoutIndicatorsInput;
  scenarios?: ScenarioCreateManyWithoutIndicatorsInput;
}

export interface KeywordCreateManyWithoutIndicatorsInput {
  create?:
    | KeywordCreateWithoutIndicatorsInput[]
    | KeywordCreateWithoutIndicatorsInput;
  connect?: KeywordWhereUniqueInput[] | KeywordWhereUniqueInput;
}

export interface KeywordCreateWithoutIndicatorsInput {
  name?: String;
  description?: String;
}

export interface ScenarioCreateManyWithoutIndicatorsInput {
  create?:
    | ScenarioCreateWithoutIndicatorsInput[]
    | ScenarioCreateWithoutIndicatorsInput;
  connect?: ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput;
}

export interface ScenarioCreateWithoutIndicatorsInput {
  name?: String;
  description?: String;
}

export interface StrengthCreateOneInput {
  create?: StrengthCreateInput;
  connect?: StrengthWhereUniqueInput;
}

export interface StrengthCreateInput {
  strength?: Int;
  meaning?: String;
}

export interface CategoryUpdateInput {
  name?: String;
  events?: EventUpdateManyWithoutCategoriesInput;
}

export interface EventUpdateManyWithoutCategoriesInput {
  create?:
    | EventCreateWithoutCategoriesInput[]
    | EventCreateWithoutCategoriesInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  set?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutCategoriesInput[]
    | EventUpdateWithWhereUniqueWithoutCategoriesInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutCategoriesInput[]
    | EventUpsertWithWhereUniqueWithoutCategoriesInput;
  deleteMany?: EventScalarWhereInput[] | EventScalarWhereInput;
  updateMany?:
    | EventUpdateManyWithWhereNestedInput[]
    | EventUpdateManyWithWhereNestedInput;
}

export interface EventUpdateWithWhereUniqueWithoutCategoriesInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutCategoriesDataInput;
}

export interface EventUpdateWithoutCategoriesDataInput {
  date?: DateTimeInput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  read?: Boolean;
  indications?: IndicationUpdateManyWithoutEventInput;
}

export interface IndicationUpdateManyWithoutEventInput {
  create?:
    | IndicationCreateWithoutEventInput[]
    | IndicationCreateWithoutEventInput;
  delete?: IndicationWhereUniqueInput[] | IndicationWhereUniqueInput;
  connect?: IndicationWhereUniqueInput[] | IndicationWhereUniqueInput;
  set?: IndicationWhereUniqueInput[] | IndicationWhereUniqueInput;
  disconnect?: IndicationWhereUniqueInput[] | IndicationWhereUniqueInput;
  update?:
    | IndicationUpdateWithWhereUniqueWithoutEventInput[]
    | IndicationUpdateWithWhereUniqueWithoutEventInput;
  upsert?:
    | IndicationUpsertWithWhereUniqueWithoutEventInput[]
    | IndicationUpsertWithWhereUniqueWithoutEventInput;
  deleteMany?: IndicationScalarWhereInput[] | IndicationScalarWhereInput;
}

export interface IndicationUpdateWithWhereUniqueWithoutEventInput {
  where: IndicationWhereUniqueInput;
  data: IndicationUpdateWithoutEventDataInput;
}

export interface IndicationUpdateWithoutEventDataInput {
  indicator?: IndicatorUpdateOneRequiredInput;
  strength?: StrengthUpdateOneRequiredInput;
}

export interface IndicatorUpdateOneRequiredInput {
  create?: IndicatorCreateInput;
  update?: IndicatorUpdateDataInput;
  upsert?: IndicatorUpsertNestedInput;
  connect?: IndicatorWhereUniqueInput;
}

export interface IndicatorUpdateDataInput {
  name?: String;
  description?: String;
  keywords?: KeywordUpdateManyWithoutIndicatorsInput;
  scenarios?: ScenarioUpdateManyWithoutIndicatorsInput;
}

export interface KeywordUpdateManyWithoutIndicatorsInput {
  create?:
    | KeywordCreateWithoutIndicatorsInput[]
    | KeywordCreateWithoutIndicatorsInput;
  delete?: KeywordWhereUniqueInput[] | KeywordWhereUniqueInput;
  connect?: KeywordWhereUniqueInput[] | KeywordWhereUniqueInput;
  set?: KeywordWhereUniqueInput[] | KeywordWhereUniqueInput;
  disconnect?: KeywordWhereUniqueInput[] | KeywordWhereUniqueInput;
  update?:
    | KeywordUpdateWithWhereUniqueWithoutIndicatorsInput[]
    | KeywordUpdateWithWhereUniqueWithoutIndicatorsInput;
  upsert?:
    | KeywordUpsertWithWhereUniqueWithoutIndicatorsInput[]
    | KeywordUpsertWithWhereUniqueWithoutIndicatorsInput;
  deleteMany?: KeywordScalarWhereInput[] | KeywordScalarWhereInput;
  updateMany?:
    | KeywordUpdateManyWithWhereNestedInput[]
    | KeywordUpdateManyWithWhereNestedInput;
}

export interface KeywordUpdateWithWhereUniqueWithoutIndicatorsInput {
  where: KeywordWhereUniqueInput;
  data: KeywordUpdateWithoutIndicatorsDataInput;
}

export interface KeywordUpdateWithoutIndicatorsDataInput {
  name?: String;
  description?: String;
}

export interface KeywordUpsertWithWhereUniqueWithoutIndicatorsInput {
  where: KeywordWhereUniqueInput;
  update: KeywordUpdateWithoutIndicatorsDataInput;
  create: KeywordCreateWithoutIndicatorsInput;
}

export interface KeywordScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: KeywordScalarWhereInput[] | KeywordScalarWhereInput;
  OR?: KeywordScalarWhereInput[] | KeywordScalarWhereInput;
  NOT?: KeywordScalarWhereInput[] | KeywordScalarWhereInput;
}

export interface KeywordUpdateManyWithWhereNestedInput {
  where: KeywordScalarWhereInput;
  data: KeywordUpdateManyDataInput;
}

export interface KeywordUpdateManyDataInput {
  name?: String;
  description?: String;
}

export interface ScenarioUpdateManyWithoutIndicatorsInput {
  create?:
    | ScenarioCreateWithoutIndicatorsInput[]
    | ScenarioCreateWithoutIndicatorsInput;
  delete?: ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput;
  connect?: ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput;
  set?: ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput;
  disconnect?: ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput;
  update?:
    | ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput[]
    | ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput;
  upsert?:
    | ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput[]
    | ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput;
  deleteMany?: ScenarioScalarWhereInput[] | ScenarioScalarWhereInput;
  updateMany?:
    | ScenarioUpdateManyWithWhereNestedInput[]
    | ScenarioUpdateManyWithWhereNestedInput;
}

export interface ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput {
  where: ScenarioWhereUniqueInput;
  data: ScenarioUpdateWithoutIndicatorsDataInput;
}

export interface ScenarioUpdateWithoutIndicatorsDataInput {
  name?: String;
  description?: String;
}

export interface ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput {
  where: ScenarioWhereUniqueInput;
  update: ScenarioUpdateWithoutIndicatorsDataInput;
  create: ScenarioCreateWithoutIndicatorsInput;
}

export interface ScenarioScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: ScenarioScalarWhereInput[] | ScenarioScalarWhereInput;
  OR?: ScenarioScalarWhereInput[] | ScenarioScalarWhereInput;
  NOT?: ScenarioScalarWhereInput[] | ScenarioScalarWhereInput;
}

export interface ScenarioUpdateManyWithWhereNestedInput {
  where: ScenarioScalarWhereInput;
  data: ScenarioUpdateManyDataInput;
}

export interface ScenarioUpdateManyDataInput {
  name?: String;
  description?: String;
}

export interface IndicatorUpsertNestedInput {
  update: IndicatorUpdateDataInput;
  create: IndicatorCreateInput;
}

export interface StrengthUpdateOneRequiredInput {
  create?: StrengthCreateInput;
  update?: StrengthUpdateDataInput;
  upsert?: StrengthUpsertNestedInput;
  connect?: StrengthWhereUniqueInput;
}

export interface StrengthUpdateDataInput {
  strength?: Int;
  meaning?: String;
}

export interface StrengthUpsertNestedInput {
  update: StrengthUpdateDataInput;
  create: StrengthCreateInput;
}

export interface IndicationUpsertWithWhereUniqueWithoutEventInput {
  where: IndicationWhereUniqueInput;
  update: IndicationUpdateWithoutEventDataInput;
  create: IndicationCreateWithoutEventInput;
}

export interface IndicationScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: IndicationScalarWhereInput[] | IndicationScalarWhereInput;
  OR?: IndicationScalarWhereInput[] | IndicationScalarWhereInput;
  NOT?: IndicationScalarWhereInput[] | IndicationScalarWhereInput;
}

export interface EventUpsertWithWhereUniqueWithoutCategoriesInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutCategoriesDataInput;
  create: EventCreateWithoutCategoriesInput;
}

export interface EventScalarWhereInput {
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  href?: String;
  href_not?: String;
  href_in?: String[] | String;
  href_not_in?: String[] | String;
  href_lt?: String;
  href_lte?: String;
  href_gt?: String;
  href_gte?: String;
  href_contains?: String;
  href_not_contains?: String;
  href_starts_with?: String;
  href_not_starts_with?: String;
  href_ends_with?: String;
  href_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  read?: Boolean;
  read_not?: Boolean;
  AND?: EventScalarWhereInput[] | EventScalarWhereInput;
  OR?: EventScalarWhereInput[] | EventScalarWhereInput;
  NOT?: EventScalarWhereInput[] | EventScalarWhereInput;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  date?: DateTimeInput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  read?: Boolean;
}

export interface CategoryUpdateManyMutationInput {
  name?: String;
}

export interface EventCreateInput {
  date?: DateTimeInput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  read?: Boolean;
  indications?: IndicationCreateManyWithoutEventInput;
  categories?: CategoryCreateManyWithoutEventsInput;
}

export interface CategoryCreateManyWithoutEventsInput {
  create?:
    | CategoryCreateWithoutEventsInput[]
    | CategoryCreateWithoutEventsInput;
  connect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
}

export interface CategoryCreateWithoutEventsInput {
  name: String;
}

export interface EventUpdateInput {
  date?: DateTimeInput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  read?: Boolean;
  indications?: IndicationUpdateManyWithoutEventInput;
  categories?: CategoryUpdateManyWithoutEventsInput;
}

export interface CategoryUpdateManyWithoutEventsInput {
  create?:
    | CategoryCreateWithoutEventsInput[]
    | CategoryCreateWithoutEventsInput;
  delete?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  connect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  set?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  disconnect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  update?:
    | CategoryUpdateWithWhereUniqueWithoutEventsInput[]
    | CategoryUpdateWithWhereUniqueWithoutEventsInput;
  upsert?:
    | CategoryUpsertWithWhereUniqueWithoutEventsInput[]
    | CategoryUpsertWithWhereUniqueWithoutEventsInput;
  deleteMany?: CategoryScalarWhereInput[] | CategoryScalarWhereInput;
  updateMany?:
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput;
}

export interface CategoryUpdateWithWhereUniqueWithoutEventsInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutEventsDataInput;
}

export interface CategoryUpdateWithoutEventsDataInput {
  name?: String;
}

export interface CategoryUpsertWithWhereUniqueWithoutEventsInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutEventsDataInput;
  create: CategoryCreateWithoutEventsInput;
}

export interface CategoryScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CategoryScalarWhereInput[] | CategoryScalarWhereInput;
  OR?: CategoryScalarWhereInput[] | CategoryScalarWhereInput;
  NOT?: CategoryScalarWhereInput[] | CategoryScalarWhereInput;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface CategoryUpdateManyDataInput {
  name?: String;
}

export interface EventUpdateManyMutationInput {
  date?: DateTimeInput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  read?: Boolean;
}

export interface IndicationCreateInput {
  indicator: IndicatorCreateOneInput;
  event: EventCreateOneWithoutIndicationsInput;
  strength: StrengthCreateOneInput;
}

export interface EventCreateOneWithoutIndicationsInput {
  create?: EventCreateWithoutIndicationsInput;
  connect?: EventWhereUniqueInput;
}

export interface EventCreateWithoutIndicationsInput {
  date?: DateTimeInput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  read?: Boolean;
  categories?: CategoryCreateManyWithoutEventsInput;
}

export interface IndicationUpdateInput {
  indicator?: IndicatorUpdateOneRequiredInput;
  event?: EventUpdateOneRequiredWithoutIndicationsInput;
  strength?: StrengthUpdateOneRequiredInput;
}

export interface EventUpdateOneRequiredWithoutIndicationsInput {
  create?: EventCreateWithoutIndicationsInput;
  update?: EventUpdateWithoutIndicationsDataInput;
  upsert?: EventUpsertWithoutIndicationsInput;
  connect?: EventWhereUniqueInput;
}

export interface EventUpdateWithoutIndicationsDataInput {
  date?: DateTimeInput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  read?: Boolean;
  categories?: CategoryUpdateManyWithoutEventsInput;
}

export interface EventUpsertWithoutIndicationsInput {
  update: EventUpdateWithoutIndicationsDataInput;
  create: EventCreateWithoutIndicationsInput;
}

export interface IndicatorUpdateInput {
  name?: String;
  description?: String;
  keywords?: KeywordUpdateManyWithoutIndicatorsInput;
  scenarios?: ScenarioUpdateManyWithoutIndicatorsInput;
}

export interface IndicatorUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface KeywordCreateInput {
  name?: String;
  description?: String;
  indicators?: IndicatorCreateManyWithoutKeywordsInput;
}

export interface IndicatorCreateManyWithoutKeywordsInput {
  create?:
    | IndicatorCreateWithoutKeywordsInput[]
    | IndicatorCreateWithoutKeywordsInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
}

export interface IndicatorCreateWithoutKeywordsInput {
  name?: String;
  description?: String;
  scenarios?: ScenarioCreateManyWithoutIndicatorsInput;
}

export interface KeywordUpdateInput {
  name?: String;
  description?: String;
  indicators?: IndicatorUpdateManyWithoutKeywordsInput;
}

export interface IndicatorUpdateManyWithoutKeywordsInput {
  create?:
    | IndicatorCreateWithoutKeywordsInput[]
    | IndicatorCreateWithoutKeywordsInput;
  delete?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  set?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  disconnect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  update?:
    | IndicatorUpdateWithWhereUniqueWithoutKeywordsInput[]
    | IndicatorUpdateWithWhereUniqueWithoutKeywordsInput;
  upsert?:
    | IndicatorUpsertWithWhereUniqueWithoutKeywordsInput[]
    | IndicatorUpsertWithWhereUniqueWithoutKeywordsInput;
  deleteMany?: IndicatorScalarWhereInput[] | IndicatorScalarWhereInput;
  updateMany?:
    | IndicatorUpdateManyWithWhereNestedInput[]
    | IndicatorUpdateManyWithWhereNestedInput;
}

export interface IndicatorUpdateWithWhereUniqueWithoutKeywordsInput {
  where: IndicatorWhereUniqueInput;
  data: IndicatorUpdateWithoutKeywordsDataInput;
}

export interface IndicatorUpdateWithoutKeywordsDataInput {
  name?: String;
  description?: String;
  scenarios?: ScenarioUpdateManyWithoutIndicatorsInput;
}

export interface IndicatorUpsertWithWhereUniqueWithoutKeywordsInput {
  where: IndicatorWhereUniqueInput;
  update: IndicatorUpdateWithoutKeywordsDataInput;
  create: IndicatorCreateWithoutKeywordsInput;
}

export interface IndicatorScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: IndicatorScalarWhereInput[] | IndicatorScalarWhereInput;
  OR?: IndicatorScalarWhereInput[] | IndicatorScalarWhereInput;
  NOT?: IndicatorScalarWhereInput[] | IndicatorScalarWhereInput;
}

export interface IndicatorUpdateManyWithWhereNestedInput {
  where: IndicatorScalarWhereInput;
  data: IndicatorUpdateManyDataInput;
}

export interface IndicatorUpdateManyDataInput {
  name?: String;
  description?: String;
}

export interface KeywordUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface ScenarioCreateInput {
  name?: String;
  description?: String;
  indicators?: IndicatorCreateManyWithoutScenariosInput;
}

export interface IndicatorCreateManyWithoutScenariosInput {
  create?:
    | IndicatorCreateWithoutScenariosInput[]
    | IndicatorCreateWithoutScenariosInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
}

export interface IndicatorCreateWithoutScenariosInput {
  name?: String;
  description?: String;
  keywords?: KeywordCreateManyWithoutIndicatorsInput;
}

export interface ScenarioUpdateInput {
  name?: String;
  description?: String;
  indicators?: IndicatorUpdateManyWithoutScenariosInput;
}

export interface IndicatorUpdateManyWithoutScenariosInput {
  create?:
    | IndicatorCreateWithoutScenariosInput[]
    | IndicatorCreateWithoutScenariosInput;
  delete?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  set?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  disconnect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  update?:
    | IndicatorUpdateWithWhereUniqueWithoutScenariosInput[]
    | IndicatorUpdateWithWhereUniqueWithoutScenariosInput;
  upsert?:
    | IndicatorUpsertWithWhereUniqueWithoutScenariosInput[]
    | IndicatorUpsertWithWhereUniqueWithoutScenariosInput;
  deleteMany?: IndicatorScalarWhereInput[] | IndicatorScalarWhereInput;
  updateMany?:
    | IndicatorUpdateManyWithWhereNestedInput[]
    | IndicatorUpdateManyWithWhereNestedInput;
}

export interface IndicatorUpdateWithWhereUniqueWithoutScenariosInput {
  where: IndicatorWhereUniqueInput;
  data: IndicatorUpdateWithoutScenariosDataInput;
}

export interface IndicatorUpdateWithoutScenariosDataInput {
  name?: String;
  description?: String;
  keywords?: KeywordUpdateManyWithoutIndicatorsInput;
}

export interface IndicatorUpsertWithWhereUniqueWithoutScenariosInput {
  where: IndicatorWhereUniqueInput;
  update: IndicatorUpdateWithoutScenariosDataInput;
  create: IndicatorCreateWithoutScenariosInput;
}

export interface ScenarioUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface StrengthUpdateInput {
  strength?: Int;
  meaning?: String;
}

export interface StrengthUpdateManyMutationInput {
  strength?: Int;
  meaning?: String;
}

export interface UserCreateInput {
  name: String;
}

export interface UserUpdateInput {
  name?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryWhereInput;
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  NOT?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EventWhereInput;
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  OR?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  NOT?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
}

export interface IndicationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IndicationWhereInput;
  AND?: IndicationSubscriptionWhereInput[] | IndicationSubscriptionWhereInput;
  OR?: IndicationSubscriptionWhereInput[] | IndicationSubscriptionWhereInput;
  NOT?: IndicationSubscriptionWhereInput[] | IndicationSubscriptionWhereInput;
}

export interface IndicatorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IndicatorWhereInput;
  AND?: IndicatorSubscriptionWhereInput[] | IndicatorSubscriptionWhereInput;
  OR?: IndicatorSubscriptionWhereInput[] | IndicatorSubscriptionWhereInput;
  NOT?: IndicatorSubscriptionWhereInput[] | IndicatorSubscriptionWhereInput;
}

export interface KeywordSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: KeywordWhereInput;
  AND?: KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput;
  OR?: KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput;
  NOT?: KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput;
}

export interface ScenarioSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ScenarioWhereInput;
  AND?: ScenarioSubscriptionWhereInput[] | ScenarioSubscriptionWhereInput;
  OR?: ScenarioSubscriptionWhereInput[] | ScenarioSubscriptionWhereInput;
  NOT?: ScenarioSubscriptionWhereInput[] | ScenarioSubscriptionWhereInput;
}

export interface StrengthSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StrengthWhereInput;
  AND?: StrengthSubscriptionWhereInput[] | StrengthSubscriptionWhereInput;
  OR?: StrengthSubscriptionWhereInput[] | StrengthSubscriptionWhereInput;
  NOT?: StrengthSubscriptionWhereInput[] | StrengthSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Category {
  id: ID_Output;
  name: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  events: <T = FragmentableArray<Event>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Event {
  date?: DateTimeOutput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  id: ID_Output;
  read?: Boolean;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  date: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  href: () => Promise<String>;
  source: () => Promise<String>;
  id: () => Promise<ID_Output>;
  read: () => Promise<Boolean>;
  indications: <T = FragmentableArray<Indication>>(
    args?: {
      where?: IndicationWhereInput;
      orderBy?: IndicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  categories: <T = FragmentableArray<Category>>(
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  href: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  read: () => Promise<AsyncIterator<Boolean>>;
  indications: <T = Promise<AsyncIterator<IndicationSubscription>>>(
    args?: {
      where?: IndicationWhereInput;
      orderBy?: IndicationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Indication {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface IndicationPromise extends Promise<Indication>, Fragmentable {
  id: () => Promise<ID_Output>;
  indicator: <T = IndicatorPromise>() => T;
  event: <T = EventPromise>() => T;
  strength: <T = StrengthPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface IndicationSubscription
  extends Promise<AsyncIterator<Indication>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  indicator: <T = IndicatorSubscription>() => T;
  event: <T = EventSubscription>() => T;
  strength: <T = StrengthSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Indicator {
  id: ID_Output;
  name?: String;
  description?: String;
}

export interface IndicatorPromise extends Promise<Indicator>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  keywords: <T = FragmentableArray<Keyword>>(
    args?: {
      where?: KeywordWhereInput;
      orderBy?: KeywordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  scenarios: <T = FragmentableArray<Scenario>>(
    args?: {
      where?: ScenarioWhereInput;
      orderBy?: ScenarioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface IndicatorSubscription
  extends Promise<AsyncIterator<Indicator>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  keywords: <T = Promise<AsyncIterator<KeywordSubscription>>>(
    args?: {
      where?: KeywordWhereInput;
      orderBy?: KeywordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  scenarios: <T = Promise<AsyncIterator<ScenarioSubscription>>>(
    args?: {
      where?: ScenarioWhereInput;
      orderBy?: ScenarioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Keyword {
  id: ID_Output;
  name?: String;
  description?: String;
}

export interface KeywordPromise extends Promise<Keyword>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  indicators: <T = FragmentableArray<Indicator>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface KeywordSubscription
  extends Promise<AsyncIterator<Keyword>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  indicators: <T = Promise<AsyncIterator<IndicatorSubscription>>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Scenario {
  id: ID_Output;
  name?: String;
  description?: String;
}

export interface ScenarioPromise extends Promise<Scenario>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  indicators: <T = FragmentableArray<Indicator>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ScenarioSubscription
  extends Promise<AsyncIterator<Scenario>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  indicators: <T = Promise<AsyncIterator<IndicatorSubscription>>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Strength {
  id: ID_Output;
  strength?: Int;
  meaning?: String;
}

export interface StrengthPromise extends Promise<Strength>, Fragmentable {
  id: () => Promise<ID_Output>;
  strength: () => Promise<Int>;
  meaning: () => Promise<String>;
}

export interface StrengthSubscription
  extends Promise<AsyncIterator<Strength>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  strength: () => Promise<AsyncIterator<Int>>;
  meaning: () => Promise<AsyncIterator<String>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IndicationConnection {
  pageInfo: PageInfo;
  edges: IndicationEdge[];
}

export interface IndicationConnectionPromise
  extends Promise<IndicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IndicationEdge>>() => T;
  aggregate: <T = AggregateIndicationPromise>() => T;
}

export interface IndicationConnectionSubscription
  extends Promise<AsyncIterator<IndicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IndicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIndicationSubscription>() => T;
}

export interface IndicationEdge {
  node: Indication;
  cursor: String;
}

export interface IndicationEdgePromise
  extends Promise<IndicationEdge>,
    Fragmentable {
  node: <T = IndicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IndicationEdgeSubscription
  extends Promise<AsyncIterator<IndicationEdge>>,
    Fragmentable {
  node: <T = IndicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIndication {
  count: Int;
}

export interface AggregateIndicationPromise
  extends Promise<AggregateIndication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIndicationSubscription
  extends Promise<AsyncIterator<AggregateIndication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IndicatorConnection {
  pageInfo: PageInfo;
  edges: IndicatorEdge[];
}

export interface IndicatorConnectionPromise
  extends Promise<IndicatorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IndicatorEdge>>() => T;
  aggregate: <T = AggregateIndicatorPromise>() => T;
}

export interface IndicatorConnectionSubscription
  extends Promise<AsyncIterator<IndicatorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IndicatorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIndicatorSubscription>() => T;
}

export interface IndicatorEdge {
  node: Indicator;
  cursor: String;
}

export interface IndicatorEdgePromise
  extends Promise<IndicatorEdge>,
    Fragmentable {
  node: <T = IndicatorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IndicatorEdgeSubscription
  extends Promise<AsyncIterator<IndicatorEdge>>,
    Fragmentable {
  node: <T = IndicatorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIndicator {
  count: Int;
}

export interface AggregateIndicatorPromise
  extends Promise<AggregateIndicator>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIndicatorSubscription
  extends Promise<AsyncIterator<AggregateIndicator>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KeywordConnection {
  pageInfo: PageInfo;
  edges: KeywordEdge[];
}

export interface KeywordConnectionPromise
  extends Promise<KeywordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KeywordEdge>>() => T;
  aggregate: <T = AggregateKeywordPromise>() => T;
}

export interface KeywordConnectionSubscription
  extends Promise<AsyncIterator<KeywordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KeywordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKeywordSubscription>() => T;
}

export interface KeywordEdge {
  node: Keyword;
  cursor: String;
}

export interface KeywordEdgePromise extends Promise<KeywordEdge>, Fragmentable {
  node: <T = KeywordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KeywordEdgeSubscription
  extends Promise<AsyncIterator<KeywordEdge>>,
    Fragmentable {
  node: <T = KeywordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKeyword {
  count: Int;
}

export interface AggregateKeywordPromise
  extends Promise<AggregateKeyword>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKeywordSubscription
  extends Promise<AsyncIterator<AggregateKeyword>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScenarioConnection {
  pageInfo: PageInfo;
  edges: ScenarioEdge[];
}

export interface ScenarioConnectionPromise
  extends Promise<ScenarioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScenarioEdge>>() => T;
  aggregate: <T = AggregateScenarioPromise>() => T;
}

export interface ScenarioConnectionSubscription
  extends Promise<AsyncIterator<ScenarioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScenarioEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScenarioSubscription>() => T;
}

export interface ScenarioEdge {
  node: Scenario;
  cursor: String;
}

export interface ScenarioEdgePromise
  extends Promise<ScenarioEdge>,
    Fragmentable {
  node: <T = ScenarioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScenarioEdgeSubscription
  extends Promise<AsyncIterator<ScenarioEdge>>,
    Fragmentable {
  node: <T = ScenarioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScenario {
  count: Int;
}

export interface AggregateScenarioPromise
  extends Promise<AggregateScenario>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScenarioSubscription
  extends Promise<AsyncIterator<AggregateScenario>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StrengthConnection {
  pageInfo: PageInfo;
  edges: StrengthEdge[];
}

export interface StrengthConnectionPromise
  extends Promise<StrengthConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StrengthEdge>>() => T;
  aggregate: <T = AggregateStrengthPromise>() => T;
}

export interface StrengthConnectionSubscription
  extends Promise<AsyncIterator<StrengthConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StrengthEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStrengthSubscription>() => T;
}

export interface StrengthEdge {
  node: Strength;
  cursor: String;
}

export interface StrengthEdgePromise
  extends Promise<StrengthEdge>,
    Fragmentable {
  node: <T = StrengthPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StrengthEdgeSubscription
  extends Promise<AsyncIterator<StrengthEdge>>,
    Fragmentable {
  node: <T = StrengthSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStrength {
  count: Int;
}

export interface AggregateStrengthPromise
  extends Promise<AggregateStrength>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStrengthSubscription
  extends Promise<AsyncIterator<AggregateStrength>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  date?: DateTimeOutput;
  title?: String;
  description?: String;
  href?: String;
  source?: String;
  id: ID_Output;
  read?: Boolean;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  date: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  href: () => Promise<String>;
  source: () => Promise<String>;
  id: () => Promise<ID_Output>;
  read: () => Promise<Boolean>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  href: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  read: () => Promise<AsyncIterator<Boolean>>;
}

export interface IndicationSubscriptionPayload {
  mutation: MutationType;
  node: Indication;
  updatedFields: String[];
  previousValues: IndicationPreviousValues;
}

export interface IndicationSubscriptionPayloadPromise
  extends Promise<IndicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IndicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IndicationPreviousValuesPromise>() => T;
}

export interface IndicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IndicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IndicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IndicationPreviousValuesSubscription>() => T;
}

export interface IndicationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface IndicationPreviousValuesPromise
  extends Promise<IndicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface IndicationPreviousValuesSubscription
  extends Promise<AsyncIterator<IndicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IndicatorSubscriptionPayload {
  mutation: MutationType;
  node: Indicator;
  updatedFields: String[];
  previousValues: IndicatorPreviousValues;
}

export interface IndicatorSubscriptionPayloadPromise
  extends Promise<IndicatorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IndicatorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IndicatorPreviousValuesPromise>() => T;
}

export interface IndicatorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IndicatorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IndicatorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IndicatorPreviousValuesSubscription>() => T;
}

export interface IndicatorPreviousValues {
  id: ID_Output;
  name?: String;
  description?: String;
}

export interface IndicatorPreviousValuesPromise
  extends Promise<IndicatorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface IndicatorPreviousValuesSubscription
  extends Promise<AsyncIterator<IndicatorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface KeywordSubscriptionPayload {
  mutation: MutationType;
  node: Keyword;
  updatedFields: String[];
  previousValues: KeywordPreviousValues;
}

export interface KeywordSubscriptionPayloadPromise
  extends Promise<KeywordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KeywordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KeywordPreviousValuesPromise>() => T;
}

export interface KeywordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KeywordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KeywordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KeywordPreviousValuesSubscription>() => T;
}

export interface KeywordPreviousValues {
  id: ID_Output;
  name?: String;
  description?: String;
}

export interface KeywordPreviousValuesPromise
  extends Promise<KeywordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface KeywordPreviousValuesSubscription
  extends Promise<AsyncIterator<KeywordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface ScenarioSubscriptionPayload {
  mutation: MutationType;
  node: Scenario;
  updatedFields: String[];
  previousValues: ScenarioPreviousValues;
}

export interface ScenarioSubscriptionPayloadPromise
  extends Promise<ScenarioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScenarioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScenarioPreviousValuesPromise>() => T;
}

export interface ScenarioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScenarioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScenarioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScenarioPreviousValuesSubscription>() => T;
}

export interface ScenarioPreviousValues {
  id: ID_Output;
  name?: String;
  description?: String;
}

export interface ScenarioPreviousValuesPromise
  extends Promise<ScenarioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ScenarioPreviousValuesSubscription
  extends Promise<AsyncIterator<ScenarioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface StrengthSubscriptionPayload {
  mutation: MutationType;
  node: Strength;
  updatedFields: String[];
  previousValues: StrengthPreviousValues;
}

export interface StrengthSubscriptionPayloadPromise
  extends Promise<StrengthSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StrengthPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StrengthPreviousValuesPromise>() => T;
}

export interface StrengthSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StrengthSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StrengthSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StrengthPreviousValuesSubscription>() => T;
}

export interface StrengthPreviousValues {
  id: ID_Output;
  strength?: Int;
  meaning?: String;
}

export interface StrengthPreviousValuesPromise
  extends Promise<StrengthPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  strength: () => Promise<Int>;
  meaning: () => Promise<String>;
}

export interface StrengthPreviousValuesSubscription
  extends Promise<AsyncIterator<StrengthPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  strength: () => Promise<AsyncIterator<Int>>;
  meaning: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Keyword",
    embedded: false
  },
  {
    name: "Scenario",
    embedded: false
  },
  {
    name: "Indicator",
    embedded: false
  },
  {
    name: "Indication",
    embedded: false
  },
  {
    name: "Strength",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/faktor-10-d77a43/workspace/dev`
});
export const prisma = new Prisma();
