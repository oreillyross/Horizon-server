### This file was autogenerated by Nexus 0.11.5
### Do not make changes to this file directly


type AggregateCategory {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateIndication {
  count: Int!
}

type AggregateIndicator {
  count: Int!
}

type AggregateKeyword {
  count: Int!
}

type AggregateScenario {
  count: Int!
}

type AggregateStrength {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  createdAt: DateTime!
  events(after: String, before: String, first: Int, last: Int, orderBy: EventOrderByInput, skip: Int, where: EventWhereInput): [Event!]
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type CategoryConnection {
  aggregate: AggregateCategory!
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

input CategoryCreateInput {
  events: EventCreateManyWithoutCategoriesInput
  id: ID
  name: String!
}

input CategoryCreateManyWithoutEventsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutEventsInput!]
}

input CategoryCreateWithoutEventsInput {
  id: ID
  name: String!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

enum CategoryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input CategoryUpdateInput {
  events: EventUpdateManyWithoutCategoriesInput
  name: String
}

input CategoryUpdateManyDataInput {
  name: String
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateManyWithoutEventsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutEventsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutEventsInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutEventsInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  data: CategoryUpdateManyDataInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateWithoutEventsDataInput {
  name: String
}

input CategoryUpdateWithWhereUniqueWithoutEventsInput {
  data: CategoryUpdateWithoutEventsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutEventsInput {
  create: CategoryCreateWithoutEventsInput!
  update: CategoryUpdateWithoutEventsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  events_every: EventWhereInput
  events_none: EventWhereInput
  events_some: EventWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type Event {
  categories(after: String, before: String, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): [Category!]
  createdAt: DateTime!
  date: DateTime
  description: String
  href: String
  id: ID!
  indications(after: String, before: String, first: Int, last: Int, orderBy: IndicationOrderByInput, skip: Int, where: IndicationWhereInput): [Indication!]
  read: Boolean
  source: String
  title: String
  updatedAt: DateTime!
}

type EventConnection {
  aggregate: AggregateEvent!
  edges: [EventEdge!]!
  pageInfo: PageInfo!
}

input EventCreateInput {
  categories: CategoryCreateManyWithoutEventsInput
  date: DateTime
  description: String
  href: String
  id: ID
  indications: IndicationCreateManyWithoutEventInput
  read: Boolean
  source: String
  title: String
}

input EventCreateManyWithoutCategoriesInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutCategoriesInput!]
}

input EventCreateOneWithoutIndicationsInput {
  connect: EventWhereUniqueInput
  create: EventCreateWithoutIndicationsInput
}

input EventCreateWithoutCategoriesInput {
  date: DateTime
  description: String
  href: String
  id: ID
  indications: IndicationCreateManyWithoutEventInput
  read: Boolean
  source: String
  title: String
}

input EventCreateWithoutIndicationsInput {
  categories: CategoryCreateManyWithoutEventsInput
  date: DateTime
  description: String
  href: String
  id: ID
  read: Boolean
  source: String
  title: String
}

type EventEdge {
  cursor: String!
  node: Event!
}

enum EventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  description_ASC
  description_DESC
  href_ASC
  href_DESC
  id_ASC
  id_DESC
  read_ASC
  read_DESC
  source_ASC
  source_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EventScalarWhereInput {
  AND: [EventScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  date: DateTime
  date_gt: DateTime
  date_gte: DateTime
  date_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_not: DateTime
  date_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  href: String
  href_contains: String
  href_ends_with: String
  href_gt: String
  href_gte: String
  href_in: [String!]
  href_lt: String
  href_lte: String
  href_not: String
  href_not_contains: String
  href_not_ends_with: String
  href_not_in: [String!]
  href_not_starts_with: String
  href_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  read: Boolean
  read_not: Boolean
  source: String
  source_contains: String
  source_ends_with: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_ends_with: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_starts_with: String
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input EventUpdateInput {
  categories: CategoryUpdateManyWithoutEventsInput
  date: DateTime
  description: String
  href: String
  indications: IndicationUpdateManyWithoutEventInput
  read: Boolean
  source: String
  title: String
}

input EventUpdateManyDataInput {
  date: DateTime
  description: String
  href: String
  read: Boolean
  source: String
  title: String
}

input EventUpdateManyMutationInput {
  date: DateTime
  description: String
  href: String
  read: Boolean
  source: String
  title: String
}

input EventUpdateManyWithoutCategoriesInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutCategoriesInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input EventUpdateManyWithWhereNestedInput {
  data: EventUpdateManyDataInput!
  where: EventScalarWhereInput!
}

input EventUpdateOneRequiredWithoutIndicationsInput {
  connect: EventWhereUniqueInput
  create: EventCreateWithoutIndicationsInput
  update: EventUpdateWithoutIndicationsDataInput
  upsert: EventUpsertWithoutIndicationsInput
}

input EventUpdateWithoutCategoriesDataInput {
  date: DateTime
  description: String
  href: String
  indications: IndicationUpdateManyWithoutEventInput
  read: Boolean
  source: String
  title: String
}

input EventUpdateWithoutIndicationsDataInput {
  categories: CategoryUpdateManyWithoutEventsInput
  date: DateTime
  description: String
  href: String
  read: Boolean
  source: String
  title: String
}

input EventUpdateWithWhereUniqueWithoutCategoriesInput {
  data: EventUpdateWithoutCategoriesDataInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithoutIndicationsInput {
  create: EventCreateWithoutIndicationsInput!
  update: EventUpdateWithoutIndicationsDataInput!
}

input EventUpsertWithWhereUniqueWithoutCategoriesInput {
  create: EventCreateWithoutCategoriesInput!
  update: EventUpdateWithoutCategoriesDataInput!
  where: EventWhereUniqueInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  categories_every: CategoryWhereInput
  categories_none: CategoryWhereInput
  categories_some: CategoryWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  date: DateTime
  date_gt: DateTime
  date_gte: DateTime
  date_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_not: DateTime
  date_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  href: String
  href_contains: String
  href_ends_with: String
  href_gt: String
  href_gte: String
  href_in: [String!]
  href_lt: String
  href_lte: String
  href_not: String
  href_not_contains: String
  href_not_ends_with: String
  href_not_in: [String!]
  href_not_starts_with: String
  href_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  indications_every: IndicationWhereInput
  indications_none: IndicationWhereInput
  indications_some: IndicationWhereInput
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  read: Boolean
  read_not: Boolean
  source: String
  source_contains: String
  source_ends_with: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_ends_with: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_starts_with: String
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input EventWhereUniqueInput {
  id: ID
  title: String
}

type Indication {
  createdAt: DateTime!
  event: Event!
  id: ID!
  indicator: Indicator!
  strength: Strength!
  updatedAt: DateTime!
}

type IndicationConnection {
  aggregate: AggregateIndication!
  edges: [IndicationEdge!]!
  pageInfo: PageInfo!
}

input IndicationCreateInput {
  event: EventCreateOneWithoutIndicationsInput!
  id: ID
  indicator: IndicatorCreateOneInput!
  strength: StrengthCreateOneInput!
}

input IndicationCreateManyWithoutEventInput {
  connect: [IndicationWhereUniqueInput!]
  create: [IndicationCreateWithoutEventInput!]
}

input IndicationCreateWithoutEventInput {
  id: ID
  indicator: IndicatorCreateOneInput!
  strength: StrengthCreateOneInput!
}

type IndicationEdge {
  cursor: String!
  node: Indication!
}

enum IndicationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input IndicationScalarWhereInput {
  AND: [IndicationScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [IndicationScalarWhereInput!]
  OR: [IndicationScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input IndicationUpdateInput {
  event: EventUpdateOneRequiredWithoutIndicationsInput
  indicator: IndicatorUpdateOneRequiredInput
  strength: StrengthUpdateOneRequiredInput
}

input IndicationUpdateManyWithoutEventInput {
  connect: [IndicationWhereUniqueInput!]
  create: [IndicationCreateWithoutEventInput!]
  delete: [IndicationWhereUniqueInput!]
  deleteMany: [IndicationScalarWhereInput!]
  disconnect: [IndicationWhereUniqueInput!]
  set: [IndicationWhereUniqueInput!]
  update: [IndicationUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [IndicationUpsertWithWhereUniqueWithoutEventInput!]
}

input IndicationUpdateWithoutEventDataInput {
  indicator: IndicatorUpdateOneRequiredInput
  strength: StrengthUpdateOneRequiredInput
}

input IndicationUpdateWithWhereUniqueWithoutEventInput {
  data: IndicationUpdateWithoutEventDataInput!
  where: IndicationWhereUniqueInput!
}

input IndicationUpsertWithWhereUniqueWithoutEventInput {
  create: IndicationCreateWithoutEventInput!
  update: IndicationUpdateWithoutEventDataInput!
  where: IndicationWhereUniqueInput!
}

input IndicationWhereInput {
  AND: [IndicationWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  event: EventWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  indicator: IndicatorWhereInput
  NOT: [IndicationWhereInput!]
  OR: [IndicationWhereInput!]
  strength: StrengthWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input IndicationWhereUniqueInput {
  id: ID
}

type Indicator {
  createdAt: DateTime!
  description: String
  id: ID!
  keywords(after: String, before: String, first: Int, last: Int, orderBy: KeywordOrderByInput, skip: Int, where: KeywordWhereInput): [Keyword!]
  name: String
  scenarios(after: String, before: String, first: Int, last: Int, orderBy: ScenarioOrderByInput, skip: Int, where: ScenarioWhereInput): [Scenario!]
  updatedAt: DateTime!
}

type IndicatorConnection {
  aggregate: AggregateIndicator!
  edges: [IndicatorEdge!]!
  pageInfo: PageInfo!
}

input IndicatorCreateInput {
  description: String
  id: ID
  keywords: KeywordCreateManyInput
  name: String
  scenarios: ScenarioCreateManyWithoutIndicatorsInput
}

input IndicatorCreateManyWithoutScenariosInput {
  connect: [IndicatorWhereUniqueInput!]
  create: [IndicatorCreateWithoutScenariosInput!]
}

input IndicatorCreateOneInput {
  connect: IndicatorWhereUniqueInput
  create: IndicatorCreateInput
}

input IndicatorCreateWithoutScenariosInput {
  description: String
  id: ID
  keywords: KeywordCreateManyInput
  name: String
}

type IndicatorEdge {
  cursor: String!
  node: Indicator!
}

enum IndicatorOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input IndicatorScalarWhereInput {
  AND: [IndicatorScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [IndicatorScalarWhereInput!]
  OR: [IndicatorScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input IndicatorUpdateDataInput {
  description: String
  keywords: KeywordUpdateManyInput
  name: String
  scenarios: ScenarioUpdateManyWithoutIndicatorsInput
}

input IndicatorUpdateInput {
  description: String
  keywords: KeywordUpdateManyInput
  name: String
  scenarios: ScenarioUpdateManyWithoutIndicatorsInput
}

input IndicatorUpdateManyDataInput {
  description: String
  name: String
}

input IndicatorUpdateManyMutationInput {
  description: String
  name: String
}

input IndicatorUpdateManyWithoutScenariosInput {
  connect: [IndicatorWhereUniqueInput!]
  create: [IndicatorCreateWithoutScenariosInput!]
  delete: [IndicatorWhereUniqueInput!]
  deleteMany: [IndicatorScalarWhereInput!]
  disconnect: [IndicatorWhereUniqueInput!]
  set: [IndicatorWhereUniqueInput!]
  update: [IndicatorUpdateWithWhereUniqueWithoutScenariosInput!]
  updateMany: [IndicatorUpdateManyWithWhereNestedInput!]
  upsert: [IndicatorUpsertWithWhereUniqueWithoutScenariosInput!]
}

input IndicatorUpdateManyWithWhereNestedInput {
  data: IndicatorUpdateManyDataInput!
  where: IndicatorScalarWhereInput!
}

input IndicatorUpdateOneRequiredInput {
  connect: IndicatorWhereUniqueInput
  create: IndicatorCreateInput
  update: IndicatorUpdateDataInput
  upsert: IndicatorUpsertNestedInput
}

input IndicatorUpdateWithoutScenariosDataInput {
  description: String
  keywords: KeywordUpdateManyInput
  name: String
}

input IndicatorUpdateWithWhereUniqueWithoutScenariosInput {
  data: IndicatorUpdateWithoutScenariosDataInput!
  where: IndicatorWhereUniqueInput!
}

input IndicatorUpsertNestedInput {
  create: IndicatorCreateInput!
  update: IndicatorUpdateDataInput!
}

input IndicatorUpsertWithWhereUniqueWithoutScenariosInput {
  create: IndicatorCreateWithoutScenariosInput!
  update: IndicatorUpdateWithoutScenariosDataInput!
  where: IndicatorWhereUniqueInput!
}

input IndicatorWhereInput {
  AND: [IndicatorWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  keywords_every: KeywordWhereInput
  keywords_none: KeywordWhereInput
  keywords_some: KeywordWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [IndicatorWhereInput!]
  OR: [IndicatorWhereInput!]
  scenarios_every: ScenarioWhereInput
  scenarios_none: ScenarioWhereInput
  scenarios_some: ScenarioWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input IndicatorWhereUniqueInput {
  id: ID
  name: String
}

type Keyword {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String
  updatedAt: DateTime!
}

type KeywordConnection {
  aggregate: AggregateKeyword!
  edges: [KeywordEdge!]!
  pageInfo: PageInfo!
}

input KeywordCreateInput {
  description: String
  id: ID
  name: String
}

input KeywordCreateManyInput {
  connect: [KeywordWhereUniqueInput!]
  create: [KeywordCreateInput!]
}

type KeywordEdge {
  cursor: String!
  node: Keyword!
}

enum KeywordOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input KeywordScalarWhereInput {
  AND: [KeywordScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [KeywordScalarWhereInput!]
  OR: [KeywordScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input KeywordUpdateDataInput {
  description: String
  name: String
}

input KeywordUpdateInput {
  description: String
  name: String
}

input KeywordUpdateManyDataInput {
  description: String
  name: String
}

input KeywordUpdateManyInput {
  connect: [KeywordWhereUniqueInput!]
  create: [KeywordCreateInput!]
  delete: [KeywordWhereUniqueInput!]
  deleteMany: [KeywordScalarWhereInput!]
  disconnect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
  update: [KeywordUpdateWithWhereUniqueNestedInput!]
  updateMany: [KeywordUpdateManyWithWhereNestedInput!]
  upsert: [KeywordUpsertWithWhereUniqueNestedInput!]
}

input KeywordUpdateManyMutationInput {
  description: String
  name: String
}

input KeywordUpdateManyWithWhereNestedInput {
  data: KeywordUpdateManyDataInput!
  where: KeywordScalarWhereInput!
}

input KeywordUpdateWithWhereUniqueNestedInput {
  data: KeywordUpdateDataInput!
  where: KeywordWhereUniqueInput!
}

input KeywordUpsertWithWhereUniqueNestedInput {
  create: KeywordCreateInput!
  update: KeywordUpdateDataInput!
  where: KeywordWhereUniqueInput!
}

input KeywordWhereInput {
  AND: [KeywordWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input KeywordWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createEvent(data: EventCreateInput!): Event!
  createIndication(data: IndicationCreateInput!): Indication!
  createIndicator(data: IndicatorCreateInput!): Indicator!
  createKeyword(data: KeywordCreateInput!): Keyword!
  createScenario(data: ScenarioCreateInput!): Scenario!
  createStrength(data: StrengthCreateInput!): Strength!
  createUser(data: UserCreateInput!): User!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteIndication(where: IndicationWhereUniqueInput!): Indication
  deleteIndicator(where: IndicatorWhereUniqueInput!): Indicator
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyIndications(where: IndicationWhereInput): BatchPayload!
  deleteManyIndicators(where: IndicatorWhereInput): BatchPayload!
  deleteManyKeywords(where: KeywordWhereInput): BatchPayload!
  deleteManyScenarios(where: ScenarioWhereInput): BatchPayload!
  deleteManyStrengths(where: StrengthWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteScenario(where: ScenarioWhereUniqueInput!): Scenario
  deleteStrength(where: StrengthWhereUniqueInput!): Strength
  deleteUser(where: UserWhereUniqueInput!): User
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateIndication(data: IndicationUpdateInput!, where: IndicationWhereUniqueInput!): Indication
  updateIndicator(data: IndicatorUpdateInput!, where: IndicatorWhereUniqueInput!): Indicator
  updateKeyword(data: KeywordUpdateInput!, where: KeywordWhereUniqueInput!): Keyword
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyIndicators(data: IndicatorUpdateManyMutationInput!, where: IndicatorWhereInput): BatchPayload!
  updateManyKeywords(data: KeywordUpdateManyMutationInput!, where: KeywordWhereInput): BatchPayload!
  updateManyScenarios(data: ScenarioUpdateManyMutationInput!, where: ScenarioWhereInput): BatchPayload!
  updateManyStrengths(data: StrengthUpdateManyMutationInput!, where: StrengthWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateScenario(data: ScenarioUpdateInput!, where: ScenarioWhereUniqueInput!): Scenario
  updateStrength(data: StrengthUpdateInput!, where: StrengthWhereUniqueInput!): Strength
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  upsertIndication(create: IndicationCreateInput!, update: IndicationUpdateInput!, where: IndicationWhereUniqueInput!): Indication!
  upsertIndicator(create: IndicatorCreateInput!, update: IndicatorUpdateInput!, where: IndicatorWhereUniqueInput!): Indicator!
  upsertKeyword(create: KeywordCreateInput!, update: KeywordUpdateInput!, where: KeywordWhereUniqueInput!): Keyword!
  upsertScenario(create: ScenarioCreateInput!, update: ScenarioUpdateInput!, where: ScenarioWhereUniqueInput!): Scenario!
  upsertStrength(create: StrengthCreateInput!, update: StrengthUpdateInput!, where: StrengthWhereUniqueInput!): Strength!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  categories(after: String, before: String, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): [Category!]!
  categoriesConnection(after: String, before: String, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): CategoryConnection!
  category(where: CategoryWhereUniqueInput!): Category
  event(where: EventWhereUniqueInput!): Event
  events(after: String, before: String, first: Int, last: Int, orderBy: EventOrderByInput, skip: Int, where: EventWhereInput): [Event!]!
  eventsConnection(after: String, before: String, first: Int, last: Int, orderBy: EventOrderByInput, skip: Int, where: EventWhereInput): EventConnection!
  indication(where: IndicationWhereUniqueInput!): Indication
  indications(after: String, before: String, first: Int, last: Int, orderBy: IndicationOrderByInput, skip: Int, where: IndicationWhereInput): [Indication!]!
  indicationsConnection(after: String, before: String, first: Int, last: Int, orderBy: IndicationOrderByInput, skip: Int, where: IndicationWhereInput): IndicationConnection!
  indicator(where: IndicatorWhereUniqueInput!): Indicator
  indicators(after: String, before: String, first: Int, last: Int, orderBy: IndicatorOrderByInput, skip: Int, where: IndicatorWhereInput): [Indicator!]!
  indicatorsConnection(after: String, before: String, first: Int, last: Int, orderBy: IndicatorOrderByInput, skip: Int, where: IndicatorWhereInput): IndicatorConnection!
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywords(after: String, before: String, first: Int, last: Int, orderBy: KeywordOrderByInput, skip: Int, where: KeywordWhereInput): [Keyword!]!
  keywordsConnection(after: String, before: String, first: Int, last: Int, orderBy: KeywordOrderByInput, skip: Int, where: KeywordWhereInput): KeywordConnection!
  scenario(where: ScenarioWhereUniqueInput!): Scenario
  scenarios(after: String, before: String, first: Int, last: Int, orderBy: ScenarioOrderByInput, skip: Int, where: ScenarioWhereInput): [Scenario!]!
  scenariosConnection(after: String, before: String, first: Int, last: Int, orderBy: ScenarioOrderByInput, skip: Int, where: ScenarioWhereInput): ScenarioConnection!
  strength(where: StrengthWhereUniqueInput!): Strength
  strengths(after: String, before: String, first: Int, last: Int, orderBy: StrengthOrderByInput, skip: Int, where: StrengthWhereInput): [Strength!]!
  strengthsConnection(after: String, before: String, first: Int, last: Int, orderBy: StrengthOrderByInput, skip: Int, where: StrengthWhereInput): StrengthConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type Scenario {
  createdAt: DateTime!
  description: String
  id: ID!
  indicators(after: String, before: String, first: Int, last: Int, orderBy: IndicatorOrderByInput, skip: Int, where: IndicatorWhereInput): [Indicator!]
  name: String
  updatedAt: DateTime!
}

type ScenarioConnection {
  aggregate: AggregateScenario!
  edges: [ScenarioEdge!]!
  pageInfo: PageInfo!
}

input ScenarioCreateInput {
  description: String
  id: ID
  indicators: IndicatorCreateManyWithoutScenariosInput
  name: String
}

input ScenarioCreateManyWithoutIndicatorsInput {
  connect: [ScenarioWhereUniqueInput!]
  create: [ScenarioCreateWithoutIndicatorsInput!]
}

input ScenarioCreateWithoutIndicatorsInput {
  description: String
  id: ID
  name: String
}

type ScenarioEdge {
  cursor: String!
  node: Scenario!
}

enum ScenarioOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ScenarioScalarWhereInput {
  AND: [ScenarioScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ScenarioScalarWhereInput!]
  OR: [ScenarioScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ScenarioUpdateInput {
  description: String
  indicators: IndicatorUpdateManyWithoutScenariosInput
  name: String
}

input ScenarioUpdateManyDataInput {
  description: String
  name: String
}

input ScenarioUpdateManyMutationInput {
  description: String
  name: String
}

input ScenarioUpdateManyWithoutIndicatorsInput {
  connect: [ScenarioWhereUniqueInput!]
  create: [ScenarioCreateWithoutIndicatorsInput!]
  delete: [ScenarioWhereUniqueInput!]
  deleteMany: [ScenarioScalarWhereInput!]
  disconnect: [ScenarioWhereUniqueInput!]
  set: [ScenarioWhereUniqueInput!]
  update: [ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput!]
  updateMany: [ScenarioUpdateManyWithWhereNestedInput!]
  upsert: [ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput!]
}

input ScenarioUpdateManyWithWhereNestedInput {
  data: ScenarioUpdateManyDataInput!
  where: ScenarioScalarWhereInput!
}

input ScenarioUpdateWithoutIndicatorsDataInput {
  description: String
  name: String
}

input ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput {
  data: ScenarioUpdateWithoutIndicatorsDataInput!
  where: ScenarioWhereUniqueInput!
}

input ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput {
  create: ScenarioCreateWithoutIndicatorsInput!
  update: ScenarioUpdateWithoutIndicatorsDataInput!
  where: ScenarioWhereUniqueInput!
}

input ScenarioWhereInput {
  AND: [ScenarioWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  indicators_every: IndicatorWhereInput
  indicators_none: IndicatorWhereInput
  indicators_some: IndicatorWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ScenarioWhereInput!]
  OR: [ScenarioWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ScenarioWhereUniqueInput {
  id: ID
  name: String
}

type Strength {
  createdAt: DateTime!
  id: ID!
  meaning: String
  strength: Int
  updatedAt: DateTime!
}

type StrengthConnection {
  aggregate: AggregateStrength!
  edges: [StrengthEdge!]!
  pageInfo: PageInfo!
}

input StrengthCreateInput {
  id: ID
  meaning: String
  strength: Int
}

input StrengthCreateOneInput {
  connect: StrengthWhereUniqueInput
  create: StrengthCreateInput
}

type StrengthEdge {
  cursor: String!
  node: Strength!
}

enum StrengthOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  meaning_ASC
  meaning_DESC
  strength_ASC
  strength_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input StrengthUpdateDataInput {
  meaning: String
  strength: Int
}

input StrengthUpdateInput {
  meaning: String
  strength: Int
}

input StrengthUpdateManyMutationInput {
  meaning: String
  strength: Int
}

input StrengthUpdateOneRequiredInput {
  connect: StrengthWhereUniqueInput
  create: StrengthCreateInput
  update: StrengthUpdateDataInput
  upsert: StrengthUpsertNestedInput
}

input StrengthUpsertNestedInput {
  create: StrengthCreateInput!
  update: StrengthUpdateDataInput!
}

input StrengthWhereInput {
  AND: [StrengthWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  meaning: String
  meaning_contains: String
  meaning_ends_with: String
  meaning_gt: String
  meaning_gte: String
  meaning_in: [String!]
  meaning_lt: String
  meaning_lte: String
  meaning_not: String
  meaning_not_contains: String
  meaning_not_ends_with: String
  meaning_not_in: [String!]
  meaning_not_starts_with: String
  meaning_starts_with: String
  NOT: [StrengthWhereInput!]
  OR: [StrengthWhereInput!]
  strength: Int
  strength_gt: Int
  strength_gte: Int
  strength_in: [Int!]
  strength_lt: Int
  strength_lte: Int
  strength_not: Int
  strength_not_in: [Int!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input StrengthWhereUniqueInput {
  id: ID
}

type User {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  id: ID
  name: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  id: ID
}
